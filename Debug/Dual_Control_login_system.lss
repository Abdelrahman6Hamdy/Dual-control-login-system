
Dual_Control_login_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003acc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00003acc  00003b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800154  00800154  00003c54  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00003c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012a3  00000000  00000000  00006ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008143  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008283  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000083f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000af27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000be34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c88f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e5       	ldi	r26, 0x54	; 84
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 12 	call	0x253c	; 0x253c <main>
      8a:	0c 94 64 1d 	jmp	0x3ac8	; 0x3ac8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e3       	ldi	r26, 0x3F	; 63
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e3       	ldi	r24, 0x3F	; 63
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_VoidInit>:
#include "../../HAL/LCD/LCD_Int.h"

u8 G_u8_RecievedString[35];

void MUART_VoidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UCSRB = 0b00011000;
     b4e:	ea e2       	ldi	r30, 0x2A	; 42
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	80 83       	st	Z, r24
	UCSRC = 0b10000110;
     b56:	e0 e4       	ldi	r30, 0x40	; 64
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	86 e8       	ldi	r24, 0x86	; 134
     b5c:	80 83       	st	Z, r24
	MUART_VoidSetBaudRate(51);
     b5e:	63 e3       	ldi	r22, 0x33	; 51
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 de 05 	call	0xbbc	; 0xbbc <MUART_VoidSetBaudRate>
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <MUART_VoidTransmit>:


void MUART_VoidTransmit( u8 A_u8_Data )
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
     b7c:	eb e2       	ldi	r30, 0x2B	; 43
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	80 72       	andi	r24, 0x20	; 32
     b88:	90 70       	andi	r25, 0x00	; 0
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	b9 f3       	breq	.-18     	; 0xb7c <MUART_VoidTransmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR = A_u8_Data;
     b8e:	ec e2       	ldi	r30, 0x2C	; 44
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	80 83       	st	Z, r24
}
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <MUART_u8Receive>:


u8 	 MUART_u8Receive()
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
     ba6:	eb e2       	ldi	r30, 0x2B	; 43
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	88 23       	and	r24, r24
     bae:	dc f7       	brge	.-10     	; 0xba6 <MUART_u8Receive+0x8>
	;
	/* Get and return received data from buffer */
	return UDR;
     bb0:	ec e2       	ldi	r30, 0x2C	; 44
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <MUART_VoidSetBaudRate>:


void MUART_VoidSetBaudRate( u32 A_u32_Baud )
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <MUART_VoidSetBaudRate+0x6>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <MUART_VoidSetBaudRate+0x8>
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	69 83       	std	Y+1, r22	; 0x01
     bca:	7a 83       	std	Y+2, r23	; 0x02
     bcc:	8b 83       	std	Y+3, r24	; 0x03
     bce:	9c 83       	std	Y+4, r25	; 0x04
	UBRRL = A_u32_Baud;
     bd0:	e9 e2       	ldi	r30, 0x29	; 41
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <MUART_VoidSendString>:

void MUART_VoidSendString	( u8* A_u8_StringPtr )
{
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <MUART_VoidSendString+0x6>
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	0a c0       	rjmp	.+20     	; 0xc0a <MUART_VoidSendString+0x24>


	while(  *A_u8_StringPtr != '\0')
	{
		MUART_VoidTransmit(*A_u8_StringPtr);
     bf6:	e9 81       	ldd	r30, Y+1	; 0x01
     bf8:	fa 81       	ldd	r31, Y+2	; 0x02
     bfa:	80 81       	ld	r24, Z
     bfc:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
		A_u8_StringPtr++;
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01

void MUART_VoidSendString	( u8* A_u8_StringPtr )
{


	while(  *A_u8_StringPtr != '\0')
     c0a:	e9 81       	ldd	r30, Y+1	; 0x01
     c0c:	fa 81       	ldd	r31, Y+2	; 0x02
     c0e:	80 81       	ld	r24, Z
     c10:	88 23       	and	r24, r24
     c12:	89 f7       	brne	.-30     	; 0xbf6 <MUART_VoidSendString+0x10>
	{
		MUART_VoidTransmit(*A_u8_StringPtr);
		A_u8_StringPtr++;
	}
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <MUART_VoidReceiveString>:
//
//	A_u8_StringPtr[A_u32_Size-1] = '\0';
//}

void MUART_VoidReceiveString( u8* A_u8_StringPtr ,u8 A_u8_Size )
{
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <MUART_VoidReceiveString+0xa>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <MUART_VoidReceiveString+0xc>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9b 83       	std	Y+3, r25	; 0x03
     c30:	8a 83       	std	Y+2, r24	; 0x02
     c32:	6c 83       	std	Y+4, r22	; 0x04

	for(u8 i = 0; i < A_u8_Size ; i++ )
     c34:	19 82       	std	Y+1, r1	; 0x01
     c36:	2f c0       	rjmp	.+94     	; 0xc96 <MUART_VoidReceiveString+0x78>
	{
		A_u8_StringPtr[i] = MUART_u8Receive();
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	9b 81       	ldd	r25, Y+3	; 0x03
     c42:	8c 01       	movw	r16, r24
     c44:	02 0f       	add	r16, r18
     c46:	13 1f       	adc	r17, r19
     c48:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 83       	st	Z, r24

		if(A_u8_StringPtr[i] == '\n' || A_u8_StringPtr[i] == '\r')
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	9b 81       	ldd	r25, Y+3	; 0x03
     c5a:	fc 01       	movw	r30, r24
     c5c:	e2 0f       	add	r30, r18
     c5e:	f3 1f       	adc	r31, r19
     c60:	80 81       	ld	r24, Z
     c62:	8a 30       	cpi	r24, 0x0A	; 10
     c64:	59 f0       	breq	.+22     	; 0xc7c <MUART_VoidReceiveString+0x5e>
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	fc 01       	movw	r30, r24
     c72:	e2 0f       	add	r30, r18
     c74:	f3 1f       	adc	r31, r19
     c76:	80 81       	ld	r24, Z
     c78:	8d 30       	cpi	r24, 0x0D	; 13
     c7a:	51 f4       	brne	.+20     	; 0xc90 <MUART_VoidReceiveString+0x72>
		{	A_u8_StringPtr[i] = '\0';	break;		}
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	fc 01       	movw	r30, r24
     c88:	e2 0f       	add	r30, r18
     c8a:	f3 1f       	adc	r31, r19
     c8c:	10 82       	st	Z, r1
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <MUART_VoidReceiveString+0x80>
//}

void MUART_VoidReceiveString( u8* A_u8_StringPtr ,u8 A_u8_Size )
{

	for(u8 i = 0; i < A_u8_Size ; i++ )
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	99 81       	ldd	r25, Y+1	; 0x01
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	98 17       	cp	r25, r24
     c9c:	68 f2       	brcs	.-102    	; 0xc38 <MUART_VoidReceiveString+0x1a>

		if(A_u8_StringPtr[i] == '\n' || A_u8_StringPtr[i] == '\r')
		{	A_u8_StringPtr[i] = '\0';	break;		}
	}

	A_u8_StringPtr[A_u8_Size] = '\0';
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	9b 81       	ldd	r25, Y+3	; 0x03
     ca8:	fc 01       	movw	r30, r24
     caa:	e2 0f       	add	r30, r18
     cac:	f3 1f       	adc	r31, r19
     cae:	10 82       	st	Z, r1
}
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <MUART_VoidReceiveString2>:
void MUART_VoidReceiveString2( u8 *A_u8_StringPtr, u32 A_size )
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	28 97       	sbiw	r28, 0x08	; 8
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
     cda:	4d 83       	std	Y+5, r20	; 0x05
     cdc:	5e 83       	std	Y+6, r21	; 0x06
     cde:	6f 83       	std	Y+7, r22	; 0x07
     ce0:	78 87       	std	Y+8, r23	; 0x08
	    u8 i = 0;
     ce2:	1a 82       	std	Y+2, r1	; 0x02
	    u8 receivedChar;

	    // Receive characters until buffer is full or newline character is received
	    do {
	        receivedChar = MUART_u8Receive();
     ce4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     ce8:	89 83       	std	Y+1, r24	; 0x01
	        A_u8_StringPtr[i] = receivedChar;
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	fc 01       	movw	r30, r24
     cf6:	e2 0f       	add	r30, r18
     cf8:	f3 1f       	adc	r31, r19
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	80 83       	st	Z, r24
	        i++;
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	8a 83       	std	Y+2, r24	; 0x02
	    } while (receivedChar != '\0' && i < A_size - 1);
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 23       	and	r24, r24
     d08:	89 f0       	breq	.+34     	; 0xd2c <MUART_VoidReceiveString2+0x6a>
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	af 81       	ldd	r26, Y+7	; 0x07
     d1a:	b8 85       	ldd	r27, Y+8	; 0x08
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	a1 09       	sbc	r26, r1
     d20:	b1 09       	sbc	r27, r1
     d22:	28 17       	cp	r18, r24
     d24:	39 07       	cpc	r19, r25
     d26:	4a 07       	cpc	r20, r26
     d28:	5b 07       	cpc	r21, r27
     d2a:	e0 f2       	brcs	.-72     	; 0xce4 <MUART_VoidReceiveString2+0x22>

	    // Add null termination to the string
	    A_u8_StringPtr[i] = '\0';
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	fc 01       	movw	r30, r24
     d38:	e2 0f       	add	r30, r18
     d3a:	f3 1f       	adc	r31, r19
     d3c:	10 82       	st	Z, r1

}
     d3e:	28 96       	adiw	r28, 0x08	; 8
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <MUART_VoidReceiveString3>:

void MUART_VoidReceiveString3( u8* A_u8_StringPtr )
{
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <MUART_VoidReceiveString3+0xa>
     d5a:	0f 92       	push	r0
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	9b 83       	std	Y+3, r25	; 0x03
     d62:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8_Counter    = 0;
     d64:	19 82       	std	Y+1, r1	; 0x01
     d66:	14 c0       	rjmp	.+40     	; 0xd90 <MUART_VoidReceiveString3+0x40>

	while ( !( UCSRA & (1<<UDRE)) )
	{
		A_u8_StringPtr[L_u8_Counter++] = MUART_u8Receive();
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	9b 81       	ldd	r25, Y+3	; 0x03
     d72:	8c 01       	movw	r16, r24
     d74:	02 0f       	add	r16, r18
     d76:	13 1f       	adc	r17, r19
     d78:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     d7c:	f8 01       	movw	r30, r16
     d7e:	80 83       	st	Z, r24
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	8f 5f       	subi	r24, 0xFF	; 255
     d84:	89 83       	std	Y+1, r24	; 0x01
		MDIO_voidSetPinValue(PORTC,L_u8_Counter,HIGH);
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	69 81       	ldd	r22, Y+1	; 0x01
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>

void MUART_VoidReceiveString3( u8* A_u8_StringPtr )
{
	u8 L_u8_Counter    = 0;

	while ( !( UCSRA & (1<<UDRE)) )
     d90:	eb e2       	ldi	r30, 0x2B	; 43
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	80 72       	andi	r24, 0x20	; 32
     d9c:	90 70       	andi	r25, 0x00	; 0
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	19 f3       	breq	.-58     	; 0xd68 <MUART_VoidReceiveString3+0x18>
	{
		A_u8_StringPtr[L_u8_Counter++] = MUART_u8Receive();
		MDIO_voidSetPinValue(PORTC,L_u8_Counter,HIGH);
	}
	A_u8_StringPtr[L_u8_Counter] = MUART_u8Receive();
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	8c 01       	movw	r16, r24
     dae:	02 0f       	add	r16, r18
     db0:	13 1f       	adc	r17, r19
     db2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     db6:	f8 01       	movw	r30, r16
     db8:	80 83       	st	Z, r24

}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <MUART_VoidSendNumber>:


void MUART_VoidSendNumber	( u32 A_u32_Number )
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	2a 97       	sbiw	r28, 0x0a	; 10
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	6f 83       	std	Y+7, r22	; 0x07
     de0:	78 87       	std	Y+8, r23	; 0x08
     de2:	89 87       	std	Y+9, r24	; 0x09
     de4:	9a 87       	std	Y+10, r25	; 0x0a
	u32 L_u32_Temp;
	u8 L_u8_Temp;
	for(u8 counter1 = 0 ; counter1 <= 3 ; counter1++)
     de6:	19 82       	std	Y+1, r1	; 0x01
     de8:	2d c0       	rjmp	.+90     	; 0xe44 <MUART_VoidSendNumber+0x7a>
	{
		L_u32_Temp=A_u32_Number;
     dea:	8f 81       	ldd	r24, Y+7	; 0x07
     dec:	98 85       	ldd	r25, Y+8	; 0x08
     dee:	a9 85       	ldd	r26, Y+9	; 0x09
     df0:	ba 85       	ldd	r27, Y+10	; 0x0a
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	ad 83       	std	Y+5, r26	; 0x05
     df8:	be 83       	std	Y+6, r27	; 0x06

		L_u32_Temp = (L_u32_Temp >> ( (3-counter1) * 8 ));
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	82 1b       	sub	r24, r18
     e06:	93 0b       	sbc	r25, r19
     e08:	9c 01       	movw	r18, r24
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	ad 81       	ldd	r26, Y+5	; 0x05
     e1c:	be 81       	ldd	r27, Y+6	; 0x06
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <MUART_VoidSendNumber+0x5e>
     e20:	b6 95       	lsr	r27
     e22:	a7 95       	ror	r26
     e24:	97 95       	ror	r25
     e26:	87 95       	ror	r24
     e28:	2a 95       	dec	r18
     e2a:	d2 f7       	brpl	.-12     	; 0xe20 <MUART_VoidSendNumber+0x56>
     e2c:	8b 83       	std	Y+3, r24	; 0x03
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	ad 83       	std	Y+5, r26	; 0x05
     e32:	be 83       	std	Y+6, r27	; 0x06

		L_u8_Temp = (u8)L_u32_Temp;
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	8a 83       	std	Y+2, r24	; 0x02
		MUART_VoidTransmit( L_u8_Temp );
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>

void MUART_VoidSendNumber	( u32 A_u32_Number )
{
	u32 L_u32_Temp;
	u8 L_u8_Temp;
	for(u8 counter1 = 0 ; counter1 <= 3 ; counter1++)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	80 f2       	brcs	.-96     	; 0xdea <MUART_VoidSendNumber+0x20>
		L_u32_Temp = (L_u32_Temp >> ( (3-counter1) * 8 ));

		L_u8_Temp = (u8)L_u32_Temp;
		MUART_VoidTransmit( L_u8_Temp );
	}
}
     e4a:	2a 96       	adiw	r28, 0x0a	; 10
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <MUART_u32ReceiveNumber>:

u32 MUART_u32ReceiveNumber()
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	2a 97       	sbiw	r28, 0x0a	; 10
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
	u32 L_u32_ReceivedData=0;
     e70:	1f 82       	std	Y+7, r1	; 0x07
     e72:	18 86       	std	Y+8, r1	; 0x08
     e74:	19 86       	std	Y+9, r1	; 0x09
     e76:	1a 86       	std	Y+10, r1	; 0x0a
	u8  L_u8_Temp1;
	u32 L_u32_Temp2;

	for(u8 counter = 0 ; counter <=3 ; counter++)
     e78:	19 82       	std	Y+1, r1	; 0x01
     e7a:	3c c0       	rjmp	.+120    	; 0xef4 <MUART_u32ReceiveNumber+0x98>
	{
		L_u8_Temp1 =  MUART_u8Receive();
     e7c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     e80:	8e 83       	std	Y+6, r24	; 0x06

		L_u32_Temp2 = L_u8_Temp1;
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	9b 83       	std	Y+3, r25	; 0x03
     e90:	ac 83       	std	Y+4, r26	; 0x04
     e92:	bd 83       	std	Y+5, r27	; 0x05


		L_u32_Temp2 = L_u32_Temp2 << ((3-counter)*8);
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	82 1b       	sub	r24, r18
     ea0:	93 0b       	sbc	r25, r19
     ea2:	9c 01       	movw	r18, r24
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	9b 81       	ldd	r25, Y+3	; 0x03
     eb4:	ac 81       	ldd	r26, Y+4	; 0x04
     eb6:	bd 81       	ldd	r27, Y+5	; 0x05
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <MUART_u32ReceiveNumber+0x66>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	aa 1f       	adc	r26, r26
     ec0:	bb 1f       	adc	r27, r27
     ec2:	2a 95       	dec	r18
     ec4:	d2 f7       	brpl	.-12     	; 0xeba <MUART_u32ReceiveNumber+0x5e>
     ec6:	8a 83       	std	Y+2, r24	; 0x02
     ec8:	9b 83       	std	Y+3, r25	; 0x03
     eca:	ac 83       	std	Y+4, r26	; 0x04
     ecc:	bd 83       	std	Y+5, r27	; 0x05


		L_u32_ReceivedData += L_u32_Temp2;
     ece:	2f 81       	ldd	r18, Y+7	; 0x07
     ed0:	38 85       	ldd	r19, Y+8	; 0x08
     ed2:	49 85       	ldd	r20, Y+9	; 0x09
     ed4:	5a 85       	ldd	r21, Y+10	; 0x0a
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	ac 81       	ldd	r26, Y+4	; 0x04
     edc:	bd 81       	ldd	r27, Y+5	; 0x05
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	a4 1f       	adc	r26, r20
     ee4:	b5 1f       	adc	r27, r21
     ee6:	8f 83       	std	Y+7, r24	; 0x07
     ee8:	98 87       	std	Y+8, r25	; 0x08
     eea:	a9 87       	std	Y+9, r26	; 0x09
     eec:	ba 87       	std	Y+10, r27	; 0x0a
{
	u32 L_u32_ReceivedData=0;
	u8  L_u8_Temp1;
	u32 L_u32_Temp2;

	for(u8 counter = 0 ; counter <=3 ; counter++)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	08 f4       	brcc	.+2      	; 0xefc <MUART_u32ReceiveNumber+0xa0>
     efa:	c0 cf       	rjmp	.-128    	; 0xe7c <MUART_u32ReceiveNumber+0x20>


		L_u32_ReceivedData += L_u32_Temp2;

	}
return L_u32_ReceivedData;
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	98 85       	ldd	r25, Y+8	; 0x08
     f00:	a9 85       	ldd	r26, Y+9	; 0x09
     f02:	ba 85       	ldd	r27, Y+10	; 0x0a
}
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	2a 96       	adiw	r28, 0x0a	; 10
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <MDIO_voidSetPortDirection>:
#include "DIO_Init.h"



void MDIO_voidSetPortDirection(u8 A_u8_PortNum, u8 A_u8_PortDirection)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <MDIO_voidSetPortDirection+0x6>
     f20:	00 d0       	rcall	.+0      	; 0xf22 <MDIO_voidSetPortDirection+0x8>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8_PortNum <= PORTD  &&  A_u8_PortDirection <= 0xff)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	84 30       	cpi	r24, 0x04	; 4
     f2e:	90 f5       	brcc	.+100    	; 0xf94 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_u8_PortNum)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3c 83       	std	Y+4, r19	; 0x04
     f38:	2b 83       	std	Y+3, r18	; 0x03
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	d1 f0       	breq	.+52     	; 0xf78 <MDIO_voidSetPortDirection+0x5e>
     f44:	2b 81       	ldd	r18, Y+3	; 0x03
     f46:	3c 81       	ldd	r19, Y+4	; 0x04
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	2c f4       	brge	.+10     	; 0xf58 <MDIO_voidSetPortDirection+0x3e>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	61 f0       	breq	.+24     	; 0xf6e <MDIO_voidSetPortDirection+0x54>
     f56:	1e c0       	rjmp	.+60     	; 0xf94 <MDIO_voidSetPortDirection+0x7a>
     f58:	2b 81       	ldd	r18, Y+3	; 0x03
     f5a:	3c 81       	ldd	r19, Y+4	; 0x04
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	81 f0       	breq	.+32     	; 0xf82 <MDIO_voidSetPortDirection+0x68>
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	81 f0       	breq	.+32     	; 0xf8c <MDIO_voidSetPortDirection+0x72>
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <MDIO_voidSetPortDirection+0x7a>
		{
		case PORTA : DIO_DDRA_REG = A_u8_PortDirection; break;
     f6e:	ea e3       	ldi	r30, 0x3A	; 58
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	80 83       	st	Z, r24
     f76:	0e c0       	rjmp	.+28     	; 0xf94 <MDIO_voidSetPortDirection+0x7a>
		case PORTB : DIO_DDRB_REG = A_u8_PortDirection; break;
     f78:	e7 e3       	ldi	r30, 0x37	; 55
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	80 83       	st	Z, r24
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <MDIO_voidSetPortDirection+0x7a>
		case PORTC : DIO_DDRC_REG = A_u8_PortDirection; break;
     f82:	e4 e3       	ldi	r30, 0x34	; 52
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	80 83       	st	Z, r24
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <MDIO_voidSetPortDirection+0x7a>
		case PORTD : DIO_DDRD_REG = A_u8_PortDirection; break;
     f8c:	e1 e3       	ldi	r30, 0x31	; 49
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	80 83       	st	Z, r24
		}
	}
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8_PortNum, u8 A_u8_PortValue)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <MDIO_voidSetPortValue+0x6>
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <MDIO_voidSetPortValue+0x8>
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8_PortNum <= PORTD  &&  A_u8_PortValue <= 0xff)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	84 30       	cpi	r24, 0x04	; 4
     fb6:	90 f5       	brcc	.+100    	; 0x101c <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_u8_PortNum)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	3c 83       	std	Y+4, r19	; 0x04
     fc0:	2b 83       	std	Y+3, r18	; 0x03
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	91 05       	cpc	r25, r1
     fca:	d1 f0       	breq	.+52     	; 0x1000 <MDIO_voidSetPortValue+0x5e>
     fcc:	2b 81       	ldd	r18, Y+3	; 0x03
     fce:	3c 81       	ldd	r19, Y+4	; 0x04
     fd0:	22 30       	cpi	r18, 0x02	; 2
     fd2:	31 05       	cpc	r19, r1
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <MDIO_voidSetPortValue+0x3e>
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	61 f0       	breq	.+24     	; 0xff6 <MDIO_voidSetPortValue+0x54>
     fde:	1e c0       	rjmp	.+60     	; 0x101c <MDIO_voidSetPortValue+0x7a>
     fe0:	2b 81       	ldd	r18, Y+3	; 0x03
     fe2:	3c 81       	ldd	r19, Y+4	; 0x04
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	81 f0       	breq	.+32     	; 0x100a <MDIO_voidSetPortValue+0x68>
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	91 05       	cpc	r25, r1
     ff2:	81 f0       	breq	.+32     	; 0x1014 <MDIO_voidSetPortValue+0x72>
     ff4:	13 c0       	rjmp	.+38     	; 0x101c <MDIO_voidSetPortValue+0x7a>
		{
		case PORTA : DIO_PORTA_REG = A_u8_PortValue; break;
     ff6:	eb e3       	ldi	r30, 0x3B	; 59
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	80 83       	st	Z, r24
     ffe:	0e c0       	rjmp	.+28     	; 0x101c <MDIO_voidSetPortValue+0x7a>
		case PORTB : DIO_PORTB_REG = A_u8_PortValue; break;
    1000:	e8 e3       	ldi	r30, 0x38	; 56
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	80 83       	st	Z, r24
    1008:	09 c0       	rjmp	.+18     	; 0x101c <MDIO_voidSetPortValue+0x7a>
		case PORTC : DIO_PORTC_REG = A_u8_PortValue; break;
    100a:	e5 e3       	ldi	r30, 0x35	; 53
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	80 83       	st	Z, r24
    1012:	04 c0       	rjmp	.+8      	; 0x101c <MDIO_voidSetPortValue+0x7a>
		case PORTD : DIO_PORTD_REG = A_u8_PortValue; break;
    1014:	e2 e3       	ldi	r30, 0x32	; 50
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	80 83       	st	Z, r24
		}
	}
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <MDIO_voidSetPinDirection>:
void MDIO_voidSetPinDirection(u8 A_u8_PortNum, u8 A_u8_PinNum, u8 A_u8_PinDirection)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	2d 97       	sbiw	r28, 0x0d	; 13
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	6a 83       	std	Y+2, r22	; 0x02
    1042:	4b 83       	std	Y+3, r20	; 0x03
	if( A_u8_PortNum <= PORTA && A_u8_PinNum<= PIN7 && A_u8_PinDirection <= OUTPUT)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	88 23       	and	r24, r24
    1048:	09 f0       	breq	.+2      	; 0x104c <MDIO_voidSetPinDirection+0x22>
    104a:	09 c1       	rjmp	.+530    	; 0x125e <MDIO_voidSetPinDirection+0x234>
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	08 f0       	brcs	.+2      	; 0x1054 <MDIO_voidSetPinDirection+0x2a>
    1052:	05 c1       	rjmp	.+522    	; 0x125e <MDIO_voidSetPinDirection+0x234>
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	08 f0       	brcs	.+2      	; 0x105c <MDIO_voidSetPinDirection+0x32>
    105a:	01 c1       	rjmp	.+514    	; 0x125e <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_u8_PortNum)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3d 87       	std	Y+13, r19	; 0x0d
    1064:	2c 87       	std	Y+12, r18	; 0x0c
    1066:	8c 85       	ldd	r24, Y+12	; 0x0c
    1068:	9d 85       	ldd	r25, Y+13	; 0x0d
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <MDIO_voidSetPinDirection+0x48>
    1070:	4f c0       	rjmp	.+158    	; 0x1110 <MDIO_voidSetPinDirection+0xe6>
    1072:	2c 85       	ldd	r18, Y+12	; 0x0c
    1074:	3d 85       	ldd	r19, Y+13	; 0x0d
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	2c f4       	brge	.+10     	; 0x1086 <MDIO_voidSetPinDirection+0x5c>
    107c:	8c 85       	ldd	r24, Y+12	; 0x0c
    107e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	71 f0       	breq	.+28     	; 0x10a0 <MDIO_voidSetPinDirection+0x76>
    1084:	ec c0       	rjmp	.+472    	; 0x125e <MDIO_voidSetPinDirection+0x234>
    1086:	2c 85       	ldd	r18, Y+12	; 0x0c
    1088:	3d 85       	ldd	r19, Y+13	; 0x0d
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	09 f4       	brne	.+2      	; 0x1092 <MDIO_voidSetPinDirection+0x68>
    1090:	77 c0       	rjmp	.+238    	; 0x1180 <MDIO_voidSetPinDirection+0x156>
    1092:	8c 85       	ldd	r24, Y+12	; 0x0c
    1094:	9d 85       	ldd	r25, Y+13	; 0x0d
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	91 05       	cpc	r25, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <MDIO_voidSetPinDirection+0x74>
    109c:	a9 c0       	rjmp	.+338    	; 0x11f0 <MDIO_voidSetPinDirection+0x1c6>
    109e:	df c0       	rjmp	.+446    	; 0x125e <MDIO_voidSetPinDirection+0x234>
		{
			case PORTA:

				switch (A_u8_PinDirection)
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3b 87       	std	Y+11, r19	; 0x0b
    10a8:	2a 87       	std	Y+10, r18	; 0x0a
    10aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	31 f0       	breq	.+12     	; 0x10be <MDIO_voidSetPinDirection+0x94>
    10b2:	2a 85       	ldd	r18, Y+10	; 0x0a
    10b4:	3b 85       	ldd	r19, Y+11	; 0x0b
    10b6:	21 30       	cpi	r18, 0x01	; 1
    10b8:	31 05       	cpc	r19, r1
    10ba:	b1 f0       	breq	.+44     	; 0x10e8 <MDIO_voidSetPinDirection+0xbe>
    10bc:	d0 c0       	rjmp	.+416    	; 0x125e <MDIO_voidSetPinDirection+0x234>
				{
					case INPUT  : CLR_BIT(DIO_DDRA_REG,A_u8_PinNum);break;
    10be:	aa e3       	ldi	r26, 0x3A	; 58
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	ea e3       	ldi	r30, 0x3A	; 58
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <MDIO_voidSetPinDirection+0xb2>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <MDIO_voidSetPinDirection+0xae>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	bb c0       	rjmp	.+374    	; 0x125e <MDIO_voidSetPinDirection+0x234>
					case OUTPUT : SET_BIT(DIO_DDRA_REG,A_u8_PinNum);break;
    10e8:	aa e3       	ldi	r26, 0x3A	; 58
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ea e3       	ldi	r30, 0x3A	; 58
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <MDIO_voidSetPinDirection+0xdc>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <MDIO_voidSetPinDirection+0xd8>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	a7 c0       	rjmp	.+334    	; 0x125e <MDIO_voidSetPinDirection+0x234>
			break;


			case PORTB:

				switch (A_u8_PinDirection)
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	39 87       	std	Y+9, r19	; 0x09
    1118:	28 87       	std	Y+8, r18	; 0x08
    111a:	88 85       	ldd	r24, Y+8	; 0x08
    111c:	99 85       	ldd	r25, Y+9	; 0x09
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	31 f0       	breq	.+12     	; 0x112e <MDIO_voidSetPinDirection+0x104>
    1122:	28 85       	ldd	r18, Y+8	; 0x08
    1124:	39 85       	ldd	r19, Y+9	; 0x09
    1126:	21 30       	cpi	r18, 0x01	; 1
    1128:	31 05       	cpc	r19, r1
    112a:	b1 f0       	breq	.+44     	; 0x1158 <MDIO_voidSetPinDirection+0x12e>
    112c:	98 c0       	rjmp	.+304    	; 0x125e <MDIO_voidSetPinDirection+0x234>
				{
					case INPUT  : CLR_BIT(DIO_DDRB_REG,A_u8_PinNum);break;
    112e:	a7 e3       	ldi	r26, 0x37	; 55
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e7 e3       	ldi	r30, 0x37	; 55
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <MDIO_voidSetPinDirection+0x122>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <MDIO_voidSetPinDirection+0x11e>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	83 c0       	rjmp	.+262    	; 0x125e <MDIO_voidSetPinDirection+0x234>
					case OUTPUT : SET_BIT(DIO_DDRB_REG,A_u8_PinNum);break;
    1158:	a7 e3       	ldi	r26, 0x37	; 55
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e7 e3       	ldi	r30, 0x37	; 55
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <MDIO_voidSetPinDirection+0x14c>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <MDIO_voidSetPinDirection+0x148>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	6f c0       	rjmp	.+222    	; 0x125e <MDIO_voidSetPinDirection+0x234>
			break;


			case PORTC:

				switch (A_u8_PinDirection)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3f 83       	std	Y+7, r19	; 0x07
    1188:	2e 83       	std	Y+6, r18	; 0x06
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	9f 81       	ldd	r25, Y+7	; 0x07
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	31 f0       	breq	.+12     	; 0x119e <MDIO_voidSetPinDirection+0x174>
    1192:	2e 81       	ldd	r18, Y+6	; 0x06
    1194:	3f 81       	ldd	r19, Y+7	; 0x07
    1196:	21 30       	cpi	r18, 0x01	; 1
    1198:	31 05       	cpc	r19, r1
    119a:	b1 f0       	breq	.+44     	; 0x11c8 <MDIO_voidSetPinDirection+0x19e>
    119c:	60 c0       	rjmp	.+192    	; 0x125e <MDIO_voidSetPinDirection+0x234>
				{
					case INPUT  : CLR_BIT(DIO_DDRC_REG,A_u8_PinNum);break;
    119e:	a4 e3       	ldi	r26, 0x34	; 52
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e4 e3       	ldi	r30, 0x34	; 52
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <MDIO_voidSetPinDirection+0x192>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <MDIO_voidSetPinDirection+0x18e>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	4b c0       	rjmp	.+150    	; 0x125e <MDIO_voidSetPinDirection+0x234>
					case OUTPUT : SET_BIT(DIO_DDRC_REG,A_u8_PinNum);break;
    11c8:	a4 e3       	ldi	r26, 0x34	; 52
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e4 e3       	ldi	r30, 0x34	; 52
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <MDIO_voidSetPinDirection+0x1bc>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <MDIO_voidSetPinDirection+0x1b8>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	37 c0       	rjmp	.+110    	; 0x125e <MDIO_voidSetPinDirection+0x234>
			break;


			case PORTD:

				switch (A_u8_PinDirection)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3d 83       	std	Y+5, r19	; 0x05
    11f8:	2c 83       	std	Y+4, r18	; 0x04
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	31 f0       	breq	.+12     	; 0x120e <MDIO_voidSetPinDirection+0x1e4>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	21 30       	cpi	r18, 0x01	; 1
    1208:	31 05       	cpc	r19, r1
    120a:	b1 f0       	breq	.+44     	; 0x1238 <MDIO_voidSetPinDirection+0x20e>
    120c:	28 c0       	rjmp	.+80     	; 0x125e <MDIO_voidSetPinDirection+0x234>
				{
					case INPUT  : CLR_BIT(DIO_DDRD_REG,A_u8_PinNum);break;
    120e:	a1 e3       	ldi	r26, 0x31	; 49
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e1 e3       	ldi	r30, 0x31	; 49
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <MDIO_voidSetPinDirection+0x202>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <MDIO_voidSetPinDirection+0x1fe>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	13 c0       	rjmp	.+38     	; 0x125e <MDIO_voidSetPinDirection+0x234>
					case OUTPUT : SET_BIT(DIO_DDRD_REG,A_u8_PinNum);break;
    1238:	a1 e3       	ldi	r26, 0x31	; 49
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e1 e3       	ldi	r30, 0x31	; 49
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <MDIO_voidSetPinDirection+0x22c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <MDIO_voidSetPinDirection+0x228>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
				}
			break;

		}
	}
}
    125e:	2d 96       	adiw	r28, 0x0d	; 13
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8_PortNum, u8 A_u8_PinNum, u8 A_u8_PinValue)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	2d 97       	sbiw	r28, 0x0d	; 13
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	6a 83       	std	Y+2, r22	; 0x02
    1288:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8_PortNum <= PORTD && A_u8_PinNum <= PIN7 && A_u8_PinValue <= HIGH)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f0       	brcs	.+2      	; 0x1292 <MDIO_voidSetPinValue+0x22>
    1290:	09 c1       	rjmp	.+530    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	08 f0       	brcs	.+2      	; 0x129a <MDIO_voidSetPinValue+0x2a>
    1298:	05 c1       	rjmp	.+522    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <MDIO_voidSetPinValue+0x32>
    12a0:	01 c1       	rjmp	.+514    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
	{
		switch(A_u8_PortNum)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3d 87       	std	Y+13, r19	; 0x0d
    12aa:	2c 87       	std	Y+12, r18	; 0x0c
    12ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <MDIO_voidSetPinValue+0x48>
    12b6:	4f c0       	rjmp	.+158    	; 0x1356 <MDIO_voidSetPinValue+0xe6>
    12b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <MDIO_voidSetPinValue+0x5c>
    12c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <MDIO_voidSetPinValue+0x76>
    12ca:	ec c0       	rjmp	.+472    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
    12cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <MDIO_voidSetPinValue+0x68>
    12d6:	77 c0       	rjmp	.+238    	; 0x13c6 <MDIO_voidSetPinValue+0x156>
    12d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12da:	9d 85       	ldd	r25, Y+13	; 0x0d
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <MDIO_voidSetPinValue+0x74>
    12e2:	a9 c0       	rjmp	.+338    	; 0x1436 <MDIO_voidSetPinValue+0x1c6>
    12e4:	df c0       	rjmp	.+446    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
		{
			case PORTA:

				switch (A_u8_PinValue)
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3b 87       	std	Y+11, r19	; 0x0b
    12ee:	2a 87       	std	Y+10, r18	; 0x0a
    12f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	31 f0       	breq	.+12     	; 0x1304 <MDIO_voidSetPinValue+0x94>
    12f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    12fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    12fc:	21 30       	cpi	r18, 0x01	; 1
    12fe:	31 05       	cpc	r19, r1
    1300:	b1 f0       	breq	.+44     	; 0x132e <MDIO_voidSetPinValue+0xbe>
    1302:	d0 c0       	rjmp	.+416    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
					{
						case LOW  : CLR_BIT(DIO_PORTA_REG,A_u8_PinNum);break;
    1304:	ab e3       	ldi	r26, 0x3B	; 59
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <MDIO_voidSetPinValue+0xb2>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <MDIO_voidSetPinValue+0xae>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	bb c0       	rjmp	.+374    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
						case HIGH : SET_BIT(DIO_PORTA_REG,A_u8_PinNum);break;
    132e:	ab e3       	ldi	r26, 0x3B	; 59
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <MDIO_voidSetPinValue+0xdc>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <MDIO_voidSetPinValue+0xd8>
    1350:	84 2b       	or	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	a7 c0       	rjmp	.+334    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
			break;


			case PORTB:

				switch (A_u8_PinValue)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	39 87       	std	Y+9, r19	; 0x09
    135e:	28 87       	std	Y+8, r18	; 0x08
    1360:	88 85       	ldd	r24, Y+8	; 0x08
    1362:	99 85       	ldd	r25, Y+9	; 0x09
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	31 f0       	breq	.+12     	; 0x1374 <MDIO_voidSetPinValue+0x104>
    1368:	28 85       	ldd	r18, Y+8	; 0x08
    136a:	39 85       	ldd	r19, Y+9	; 0x09
    136c:	21 30       	cpi	r18, 0x01	; 1
    136e:	31 05       	cpc	r19, r1
    1370:	b1 f0       	breq	.+44     	; 0x139e <MDIO_voidSetPinValue+0x12e>
    1372:	98 c0       	rjmp	.+304    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
					{
						case LOW  : CLR_BIT(DIO_PORTB_REG,A_u8_PinNum);break;
    1374:	a8 e3       	ldi	r26, 0x38	; 56
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e8 e3       	ldi	r30, 0x38	; 56
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <MDIO_voidSetPinValue+0x122>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <MDIO_voidSetPinValue+0x11e>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	83 c0       	rjmp	.+262    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
						case HIGH : SET_BIT(DIO_PORTB_REG,A_u8_PinNum);break;
    139e:	a8 e3       	ldi	r26, 0x38	; 56
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e8 e3       	ldi	r30, 0x38	; 56
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <MDIO_voidSetPinValue+0x14c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <MDIO_voidSetPinValue+0x148>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	6f c0       	rjmp	.+222    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
			break;


			case PORTC:

				switch (A_u8_PinValue)
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3f 83       	std	Y+7, r19	; 0x07
    13ce:	2e 83       	std	Y+6, r18	; 0x06
    13d0:	8e 81       	ldd	r24, Y+6	; 0x06
    13d2:	9f 81       	ldd	r25, Y+7	; 0x07
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	31 f0       	breq	.+12     	; 0x13e4 <MDIO_voidSetPinValue+0x174>
    13d8:	2e 81       	ldd	r18, Y+6	; 0x06
    13da:	3f 81       	ldd	r19, Y+7	; 0x07
    13dc:	21 30       	cpi	r18, 0x01	; 1
    13de:	31 05       	cpc	r19, r1
    13e0:	b1 f0       	breq	.+44     	; 0x140e <MDIO_voidSetPinValue+0x19e>
    13e2:	60 c0       	rjmp	.+192    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
					{
						case LOW  : CLR_BIT(DIO_PORTC_REG,A_u8_PinNum);break;
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <MDIO_voidSetPinValue+0x192>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <MDIO_voidSetPinValue+0x18e>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	4b c0       	rjmp	.+150    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
						case HIGH : SET_BIT(DIO_PORTC_REG,A_u8_PinNum);break;
    140e:	a5 e3       	ldi	r26, 0x35	; 53
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <MDIO_voidSetPinValue+0x1bc>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <MDIO_voidSetPinValue+0x1b8>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	37 c0       	rjmp	.+110    	; 0x14a4 <MDIO_voidSetPinValue+0x234>
			break;


			case PORTD:

				switch (A_u8_PinValue)
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	3d 83       	std	Y+5, r19	; 0x05
    143e:	2c 83       	std	Y+4, r18	; 0x04
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	31 f0       	breq	.+12     	; 0x1454 <MDIO_voidSetPinValue+0x1e4>
    1448:	2c 81       	ldd	r18, Y+4	; 0x04
    144a:	3d 81       	ldd	r19, Y+5	; 0x05
    144c:	21 30       	cpi	r18, 0x01	; 1
    144e:	31 05       	cpc	r19, r1
    1450:	b1 f0       	breq	.+44     	; 0x147e <MDIO_voidSetPinValue+0x20e>
    1452:	28 c0       	rjmp	.+80     	; 0x14a4 <MDIO_voidSetPinValue+0x234>
					{
						case LOW  : CLR_BIT(DIO_PORTD_REG,A_u8_PinNum);break;
    1454:	a2 e3       	ldi	r26, 0x32	; 50
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e2 e3       	ldi	r30, 0x32	; 50
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <MDIO_voidSetPinValue+0x202>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <MDIO_voidSetPinValue+0x1fe>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	13 c0       	rjmp	.+38     	; 0x14a4 <MDIO_voidSetPinValue+0x234>
						case HIGH : SET_BIT(DIO_PORTD_REG,A_u8_PinNum);break;
    147e:	a2 e3       	ldi	r26, 0x32	; 50
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e2 e3       	ldi	r30, 0x32	; 50
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <MDIO_voidSetPinValue+0x22c>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <MDIO_voidSetPinValue+0x228>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
					}
			break;
		}
	}
}
    14a4:	2d 96       	adiw	r28, 0x0d	; 13
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8_PortNum, u8 A_u8_PinNum)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <MDIO_u8GetPinValue+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <MDIO_u8GetPinValue+0x8>
    14be:	0f 92       	push	r0
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	8a 83       	std	Y+2, r24	; 0x02
    14c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8_Pinvalue=6;
    14c8:	86 e0       	ldi	r24, 0x06	; 6
    14ca:	89 83       	std	Y+1, r24	; 0x01

	if( A_u8_PortNum <= PORTD && A_u8_PinNum <= PIN7)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	84 30       	cpi	r24, 0x04	; 4
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <MDIO_u8GetPinValue+0x1e>
    14d2:	6b c0       	rjmp	.+214    	; 0x15aa <MDIO_u8GetPinValue+0xf4>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	88 30       	cpi	r24, 0x08	; 8
    14d8:	08 f0       	brcs	.+2      	; 0x14dc <MDIO_u8GetPinValue+0x26>
    14da:	67 c0       	rjmp	.+206    	; 0x15aa <MDIO_u8GetPinValue+0xf4>
	{

		switch(A_u8_PortNum)
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3d 83       	std	Y+5, r19	; 0x05
    14e4:	2c 83       	std	Y+4, r18	; 0x04
    14e6:	4c 81       	ldd	r20, Y+4	; 0x04
    14e8:	5d 81       	ldd	r21, Y+5	; 0x05
    14ea:	41 30       	cpi	r20, 0x01	; 1
    14ec:	51 05       	cpc	r21, r1
    14ee:	41 f1       	breq	.+80     	; 0x1540 <MDIO_u8GetPinValue+0x8a>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	91 05       	cpc	r25, r1
    14f8:	34 f4       	brge	.+12     	; 0x1506 <MDIO_u8GetPinValue+0x50>
    14fa:	2c 81       	ldd	r18, Y+4	; 0x04
    14fc:	3d 81       	ldd	r19, Y+5	; 0x05
    14fe:	21 15       	cp	r18, r1
    1500:	31 05       	cpc	r19, r1
    1502:	61 f0       	breq	.+24     	; 0x151c <MDIO_u8GetPinValue+0x66>
    1504:	52 c0       	rjmp	.+164    	; 0x15aa <MDIO_u8GetPinValue+0xf4>
    1506:	4c 81       	ldd	r20, Y+4	; 0x04
    1508:	5d 81       	ldd	r21, Y+5	; 0x05
    150a:	42 30       	cpi	r20, 0x02	; 2
    150c:	51 05       	cpc	r21, r1
    150e:	51 f1       	breq	.+84     	; 0x1564 <MDIO_u8GetPinValue+0xae>
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	b9 f1       	breq	.+110    	; 0x1588 <MDIO_u8GetPinValue+0xd2>
    151a:	47 c0       	rjmp	.+142    	; 0x15aa <MDIO_u8GetPinValue+0xf4>
		{
			case PORTA : L_u8_Pinvalue = GET_BIT(DIO_PINA_REG,A_u8_PinNum); break;
    151c:	e9 e3       	ldi	r30, 0x39	; 57
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <MDIO_u8GetPinValue+0x7e>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <MDIO_u8GetPinValue+0x7a>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	35 c0       	rjmp	.+106    	; 0x15aa <MDIO_u8GetPinValue+0xf4>
			case PORTB : L_u8_Pinvalue = GET_BIT(DIO_PINB_REG,A_u8_PinNum); break;
    1540:	e6 e3       	ldi	r30, 0x36	; 54
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <MDIO_u8GetPinValue+0xa2>
    1554:	55 95       	asr	r21
    1556:	47 95       	ror	r20
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <MDIO_u8GetPinValue+0x9e>
    155c:	ca 01       	movw	r24, r20
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	23 c0       	rjmp	.+70     	; 0x15aa <MDIO_u8GetPinValue+0xf4>
			case PORTC : L_u8_Pinvalue = GET_BIT(DIO_PINC_REG,A_u8_PinNum); break;
    1564:	e3 e3       	ldi	r30, 0x33	; 51
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a9 01       	movw	r20, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <MDIO_u8GetPinValue+0xc6>
    1578:	55 95       	asr	r21
    157a:	47 95       	ror	r20
    157c:	8a 95       	dec	r24
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <MDIO_u8GetPinValue+0xc2>
    1580:	ca 01       	movw	r24, r20
    1582:	81 70       	andi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	11 c0       	rjmp	.+34     	; 0x15aa <MDIO_u8GetPinValue+0xf4>
			case PORTD : L_u8_Pinvalue = GET_BIT(DIO_PIND_REG,A_u8_PinNum); break;
    1588:	e0 e3       	ldi	r30, 0x30	; 48
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a9 01       	movw	r20, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <MDIO_u8GetPinValue+0xea>
    159c:	55 95       	asr	r21
    159e:	47 95       	ror	r20
    15a0:	8a 95       	dec	r24
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <MDIO_u8GetPinValue+0xe6>
    15a4:	ca 01       	movw	r24, r20
    15a6:	81 70       	andi	r24, 0x01	; 1
    15a8:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return  L_u8_Pinvalue;
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <HLCD_VoidSendCommand>:
//u8 G_u8_Cursor_Pos  = 0;
//u8 G_u8_Cursor_Line = 0;


void HLCD_VoidSendCommand(u8 A_u8_cmd)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	6d 97       	sbiw	r28, 0x1d	; 29
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	8d 8f       	std	Y+29, r24	; 0x1d
	//Send Command
	MDIO_voidSetPortValue(Data_Port,A_u8_cmd);
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15d6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <MDIO_voidSetPortValue>

	//Clear RW to send Command
	MDIO_voidSetPinValue(Control_Port,RW_PIN,LOW);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>

	//Clear Rs to send Command
	MDIO_voidSetPinValue(Control_Port,RS_PIN,LOW);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>

	//Enable On
	MDIO_voidSetPinValue(Control_Port,ENABLE_PIN,HIGH);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 e8       	ldi	r26, 0x80	; 128
    15fe:	bf e3       	ldi	r27, 0x3F	; 63
    1600:	89 8f       	std	Y+25, r24	; 0x19
    1602:	9a 8f       	std	Y+26, r25	; 0x1a
    1604:	ab 8f       	std	Y+27, r26	; 0x1b
    1606:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1608:	69 8d       	ldd	r22, Y+25	; 0x19
    160a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a ef       	ldi	r20, 0xFA	; 250
    1616:	54 e4       	ldi	r21, 0x44	; 68
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8d 8b       	std	Y+21, r24	; 0x15
    1622:	9e 8b       	std	Y+22, r25	; 0x16
    1624:	af 8b       	std	Y+23, r26	; 0x17
    1626:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1628:	6d 89       	ldd	r22, Y+21	; 0x15
    162a:	7e 89       	ldd	r23, Y+22	; 0x16
    162c:	8f 89       	ldd	r24, Y+23	; 0x17
    162e:	98 8d       	ldd	r25, Y+24	; 0x18
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9c 8b       	std	Y+20, r25	; 0x14
    1646:	8b 8b       	std	Y+19, r24	; 0x13
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    164a:	6d 89       	ldd	r22, Y+21	; 0x15
    164c:	7e 89       	ldd	r23, Y+22	; 0x16
    164e:	8f 89       	ldd	r24, Y+23	; 0x17
    1650:	98 8d       	ldd	r25, Y+24	; 0x18
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165e:	18 16       	cp	r1, r24
    1660:	4c f5       	brge	.+82     	; 0x16b4 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	69 8d       	ldd	r22, Y+25	; 0x19
    1664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9c 8b       	std	Y+20, r25	; 0x14
    1688:	8b 8b       	std	Y+19, r24	; 0x13
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <HLCD_VoidSendCommand+0xee>
    168c:	88 ec       	ldi	r24, 0xC8	; 200
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9a 8b       	std	Y+18, r25	; 0x12
    1692:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1694:	89 89       	ldd	r24, Y+17	; 0x11
    1696:	9a 89       	ldd	r25, Y+18	; 0x12
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <HLCD_VoidSendCommand+0xdc>
    169c:	9a 8b       	std	Y+18, r25	; 0x12
    169e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	8b 89       	ldd	r24, Y+19	; 0x13
    16a2:	9c 89       	ldd	r25, Y+20	; 0x14
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9c 8b       	std	Y+20, r25	; 0x14
    16a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16aa:	8b 89       	ldd	r24, Y+19	; 0x13
    16ac:	9c 89       	ldd	r25, Y+20	; 0x14
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <HLCD_VoidSendCommand+0xd0>
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b4:	6d 89       	ldd	r22, Y+21	; 0x15
    16b6:	7e 89       	ldd	r23, Y+22	; 0x16
    16b8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ba:	98 8d       	ldd	r25, Y+24	; 0x18
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9c 8b       	std	Y+20, r25	; 0x14
    16c6:	8b 8b       	std	Y+19, r24	; 0x13
    16c8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ca:	9c 89       	ldd	r25, Y+20	; 0x14
    16cc:	98 8b       	std	Y+16, r25	; 0x10
    16ce:	8f 87       	std	Y+15, r24	; 0x0f
    16d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d2:	98 89       	ldd	r25, Y+16	; 0x10
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <HLCD_VoidSendCommand+0x118>
    16d8:	98 8b       	std	Y+16, r25	; 0x10
    16da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);


	//Enable oFF
	MDIO_voidSetPinValue(Control_Port,ENABLE_PIN,LOW);
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	62 e0       	ldi	r22, 0x02	; 2
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a0 e8       	ldi	r26, 0x80	; 128
    16ec:	bf e3       	ldi	r27, 0x3F	; 63
    16ee:	8b 87       	std	Y+11, r24	; 0x0b
    16f0:	9c 87       	std	Y+12, r25	; 0x0c
    16f2:	ad 87       	std	Y+13, r26	; 0x0d
    16f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a ef       	ldi	r20, 0xFA	; 250
    1704:	54 e4       	ldi	r21, 0x44	; 68
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8f 83       	std	Y+7, r24	; 0x07
    1710:	98 87       	std	Y+8, r25	; 0x08
    1712:	a9 87       	std	Y+9, r26	; 0x09
    1714:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1716:	6f 81       	ldd	r22, Y+7	; 0x07
    1718:	78 85       	ldd	r23, Y+8	; 0x08
    171a:	89 85       	ldd	r24, Y+9	; 0x09
    171c:	9a 85       	ldd	r25, Y+10	; 0x0a
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    172a:	88 23       	and	r24, r24
    172c:	2c f4       	brge	.+10     	; 0x1738 <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	3f c0       	rjmp	.+126    	; 0x17b6 <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1738:	6f 81       	ldd	r22, Y+7	; 0x07
    173a:	78 85       	ldd	r23, Y+8	; 0x08
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	4c f5       	brge	.+82     	; 0x17a2 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1750:	6b 85       	ldd	r22, Y+11	; 0x0b
    1752:	7c 85       	ldd	r23, Y+12	; 0x0c
    1754:	8d 85       	ldd	r24, Y+13	; 0x0d
    1756:	9e 85       	ldd	r25, Y+14	; 0x0e
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e2       	ldi	r20, 0x20	; 32
    175e:	51 e4       	ldi	r21, 0x41	; 65
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <HLCD_VoidSendCommand+0x1dc>
    177a:	88 ec       	ldi	r24, 0xC8	; 200
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <HLCD_VoidSendCommand+0x1ca>
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9e 83       	std	Y+6, r25	; 0x06
    1796:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	69 f7       	brne	.-38     	; 0x177a <HLCD_VoidSendCommand+0x1be>
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	6f 81       	ldd	r22, Y+7	; 0x07
    17a4:	78 85       	ldd	r23, Y+8	; 0x08
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <HLCD_VoidSendCommand+0x206>
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    17ca:	6d 96       	adiw	r28, 0x1d	; 29
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <HLCD_VoidSendData>:


void HLCD_VoidSendData(u8 A_u8_Data)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	ab 97       	sbiw	r28, 0x2b	; 43
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	8b a7       	std	Y+43, r24	; 0x2b
	//Send Command
	MDIO_voidSetPortValue(Data_Port,A_u8_Data);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	6b a5       	ldd	r22, Y+43	; 0x2b
    17f6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <MDIO_voidSetPortValue>

	//Clear RW to send Command
	MDIO_voidSetPinValue(Control_Port,RW_PIN,LOW);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>

	//Enable On
	MDIO_voidSetPinValue(Control_Port,ENABLE_PIN,HIGH);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	62 e0       	ldi	r22, 0x02	; 2
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e8       	ldi	r26, 0x80	; 128
    1814:	bf e3       	ldi	r27, 0x3F	; 63
    1816:	8f a3       	std	Y+39, r24	; 0x27
    1818:	98 a7       	std	Y+40, r25	; 0x28
    181a:	a9 a7       	std	Y+41, r26	; 0x29
    181c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	6f a1       	ldd	r22, Y+39	; 0x27
    1820:	78 a5       	ldd	r23, Y+40	; 0x28
    1822:	89 a5       	ldd	r24, Y+41	; 0x29
    1824:	9a a5       	ldd	r25, Y+42	; 0x2a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a ef       	ldi	r20, 0xFA	; 250
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8b a3       	std	Y+35, r24	; 0x23
    1838:	9c a3       	std	Y+36, r25	; 0x24
    183a:	ad a3       	std	Y+37, r26	; 0x25
    183c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <HLCD_VoidSendData+0x84>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9a a3       	std	Y+34, r25	; 0x22
    185c:	89 a3       	std	Y+33, r24	; 0x21
    185e:	3f c0       	rjmp	.+126    	; 0x18de <HLCD_VoidSendData+0x102>
	else if (__tmp > 65535)
    1860:	6b a1       	ldd	r22, Y+35	; 0x23
    1862:	7c a1       	ldd	r23, Y+36	; 0x24
    1864:	8d a1       	ldd	r24, Y+37	; 0x25
    1866:	9e a1       	ldd	r25, Y+38	; 0x26
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <HLCD_VoidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	6f a1       	ldd	r22, Y+39	; 0x27
    187a:	78 a5       	ldd	r23, Y+40	; 0x28
    187c:	89 a5       	ldd	r24, Y+41	; 0x29
    187e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9a a3       	std	Y+34, r25	; 0x22
    189e:	89 a3       	std	Y+33, r24	; 0x21
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <HLCD_VoidSendData+0xe4>
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	98 a3       	std	Y+32, r25	; 0x20
    18a8:	8f 8f       	std	Y+31, r24	; 0x1f
    18aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ac:	98 a1       	ldd	r25, Y+32	; 0x20
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <HLCD_VoidSendData+0xd2>
    18b2:	98 a3       	std	Y+32, r25	; 0x20
    18b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	89 a1       	ldd	r24, Y+33	; 0x21
    18b8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	89 a1       	ldd	r24, Y+33	; 0x21
    18c2:	9a a1       	ldd	r25, Y+34	; 0x22
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <HLCD_VoidSendData+0xc6>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <HLCD_VoidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	6b a1       	ldd	r22, Y+35	; 0x23
    18cc:	7c a1       	ldd	r23, Y+36	; 0x24
    18ce:	8d a1       	ldd	r24, Y+37	; 0x25
    18d0:	9e a1       	ldd	r25, Y+38	; 0x26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9a a3       	std	Y+34, r25	; 0x22
    18dc:	89 a3       	std	Y+33, r24	; 0x21
    18de:	89 a1       	ldd	r24, Y+33	; 0x21
    18e0:	9a a1       	ldd	r25, Y+34	; 0x22
    18e2:	9e 8f       	std	Y+30, r25	; 0x1e
    18e4:	8d 8f       	std	Y+29, r24	; 0x1d
    18e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <HLCD_VoidSendData+0x10e>
    18ee:	9e 8f       	std	Y+30, r25	; 0x1e
    18f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//Set Rs to send Command
	MDIO_voidSetPinValue(Control_Port,RS_PIN,HIGH);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e8       	ldi	r26, 0x80	; 128
    1902:	bf e3       	ldi	r27, 0x3F	; 63
    1904:	89 8f       	std	Y+25, r24	; 0x19
    1906:	9a 8f       	std	Y+26, r25	; 0x1a
    1908:	ab 8f       	std	Y+27, r26	; 0x1b
    190a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	69 8d       	ldd	r22, Y+25	; 0x19
    190e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a ef       	ldi	r20, 0xFA	; 250
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8d 8b       	std	Y+21, r24	; 0x15
    1926:	9e 8b       	std	Y+22, r25	; 0x16
    1928:	af 8b       	std	Y+23, r26	; 0x17
    192a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    192c:	6d 89       	ldd	r22, Y+21	; 0x15
    192e:	7e 89       	ldd	r23, Y+22	; 0x16
    1930:	8f 89       	ldd	r24, Y+23	; 0x17
    1932:	98 8d       	ldd	r25, Y+24	; 0x18
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <HLCD_VoidSendData+0x172>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9c 8b       	std	Y+20, r25	; 0x14
    194a:	8b 8b       	std	Y+19, r24	; 0x13
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <HLCD_VoidSendData+0x1f0>
	else if (__tmp > 65535)
    194e:	6d 89       	ldd	r22, Y+21	; 0x15
    1950:	7e 89       	ldd	r23, Y+22	; 0x16
    1952:	8f 89       	ldd	r24, Y+23	; 0x17
    1954:	98 8d       	ldd	r25, Y+24	; 0x18
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <HLCD_VoidSendData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	69 8d       	ldd	r22, Y+25	; 0x19
    1968:	7a 8d       	ldd	r23, Y+26	; 0x1a
    196a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    196c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9c 8b       	std	Y+20, r25	; 0x14
    198c:	8b 8b       	std	Y+19, r24	; 0x13
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <HLCD_VoidSendData+0x1d2>
    1990:	88 ec       	ldi	r24, 0xC8	; 200
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9a 8b       	std	Y+18, r25	; 0x12
    1996:	89 8b       	std	Y+17, r24	; 0x11
    1998:	89 89       	ldd	r24, Y+17	; 0x11
    199a:	9a 89       	ldd	r25, Y+18	; 0x12
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <HLCD_VoidSendData+0x1c0>
    19a0:	9a 8b       	std	Y+18, r25	; 0x12
    19a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8b 89       	ldd	r24, Y+19	; 0x13
    19a6:	9c 89       	ldd	r25, Y+20	; 0x14
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9c 8b       	std	Y+20, r25	; 0x14
    19ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8b 89       	ldd	r24, Y+19	; 0x13
    19b0:	9c 89       	ldd	r25, Y+20	; 0x14
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <HLCD_VoidSendData+0x1b4>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <HLCD_VoidSendData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ba:	7e 89       	ldd	r23, Y+22	; 0x16
    19bc:	8f 89       	ldd	r24, Y+23	; 0x17
    19be:	98 8d       	ldd	r25, Y+24	; 0x18
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9c 8b       	std	Y+20, r25	; 0x14
    19ca:	8b 8b       	std	Y+19, r24	; 0x13
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	98 8b       	std	Y+16, r25	; 0x10
    19d2:	8f 87       	std	Y+15, r24	; 0x0f
    19d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d6:	98 89       	ldd	r25, Y+16	; 0x10
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <HLCD_VoidSendData+0x1fc>
    19dc:	98 8b       	std	Y+16, r25	; 0x10
    19de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	//Enable oFF
	MDIO_voidSetPinValue(Control_Port,ENABLE_PIN,LOW);
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	62 e0       	ldi	r22, 0x02	; 2
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e8       	ldi	r26, 0x80	; 128
    19f0:	bf e3       	ldi	r27, 0x3F	; 63
    19f2:	8b 87       	std	Y+11, r24	; 0x0b
    19f4:	9c 87       	std	Y+12, r25	; 0x0c
    19f6:	ad 87       	std	Y+13, r26	; 0x0d
    19f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	4a ef       	ldi	r20, 0xFA	; 250
    1a08:	54 e4       	ldi	r21, 0x44	; 68
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8f 83       	std	Y+7, r24	; 0x07
    1a14:	98 87       	std	Y+8, r25	; 0x08
    1a16:	a9 87       	std	Y+9, r26	; 0x09
    1a18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <HLCD_VoidSendData+0x260>
		__ticks = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
    1a3a:	3f c0       	rjmp	.+126    	; 0x1aba <HLCD_VoidSendData+0x2de>
	else if (__tmp > 65535)
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	3f ef       	ldi	r19, 0xFF	; 255
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	57 e4       	ldi	r21, 0x47	; 71
    1a4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a50:	18 16       	cp	r1, r24
    1a52:	4c f5       	brge	.+82     	; 0x1aa6 <HLCD_VoidSendData+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e2       	ldi	r20, 0x20	; 32
    1a62:	51 e4       	ldi	r21, 0x41	; 65
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <HLCD_VoidSendData+0x2c0>
    1a7e:	88 ec       	ldi	r24, 0xC8	; 200
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <HLCD_VoidSendData+0x2ae>
    1a8e:	9c 83       	std	Y+4, r25	; 0x04
    1a90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	69 f7       	brne	.-38     	; 0x1a7e <HLCD_VoidSendData+0x2a2>
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <HLCD_VoidSendData+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	9a 83       	std	Y+2, r25	; 0x02
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <HLCD_VoidSendData+0x2ea>
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
//	G_u8_Cursor_Pos++;

//	if(G_u8_Cursor_Pos<15)
//	{G_u8_Cursor_Pos -= 16;}

}
    1ace:	ab 96       	adiw	r28, 0x2b	; 43
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <HLCD_VoidInit>:


void HLCD_VoidInit(){
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	e8 97       	sbiw	r28, 0x38	; 56
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61

	MDIO_voidSetPortDirection(Data_Port,0XFF);
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	6f ef       	ldi	r22, 0xFF	; 255
    1af8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <MDIO_voidSetPortDirection>
	MDIO_voidSetPortDirection(Control_Port,0XFF);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	6f ef       	ldi	r22, 0xFF	; 255
    1b00:	0e 94 8d 07 	call	0xf1a	; 0xf1a <MDIO_voidSetPortDirection>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a0 ef       	ldi	r26, 0xF0	; 240
    1b0a:	b1 e4       	ldi	r27, 0x41	; 65
    1b0c:	8d ab       	std	Y+53, r24	; 0x35
    1b0e:	9e ab       	std	Y+54, r25	; 0x36
    1b10:	af ab       	std	Y+55, r26	; 0x37
    1b12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b14:	6d a9       	ldd	r22, Y+53	; 0x35
    1b16:	7e a9       	ldd	r23, Y+54	; 0x36
    1b18:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a ef       	ldi	r20, 0xFA	; 250
    1b22:	54 e4       	ldi	r21, 0x44	; 68
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	89 ab       	std	Y+49, r24	; 0x31
    1b2e:	9a ab       	std	Y+50, r25	; 0x32
    1b30:	ab ab       	std	Y+51, r26	; 0x33
    1b32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b34:	69 a9       	ldd	r22, Y+49	; 0x31
    1b36:	7a a9       	ldd	r23, Y+50	; 0x32
    1b38:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <HLCD_VoidInit+0x76>
		__ticks = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	98 ab       	std	Y+48, r25	; 0x30
    1b52:	8f a7       	std	Y+47, r24	; 0x2f
    1b54:	3f c0       	rjmp	.+126    	; 0x1bd4 <HLCD_VoidInit+0xf4>
	else if (__tmp > 65535)
    1b56:	69 a9       	ldd	r22, Y+49	; 0x31
    1b58:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	57 e4       	ldi	r21, 0x47	; 71
    1b66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	4c f5       	brge	.+82     	; 0x1bc0 <HLCD_VoidInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b70:	7e a9       	ldd	r23, Y+54	; 0x36
    1b72:	8f a9       	ldd	r24, Y+55	; 0x37
    1b74:	98 ad       	ldd	r25, Y+56	; 0x38
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	98 ab       	std	Y+48, r25	; 0x30
    1b94:	8f a7       	std	Y+47, r24	; 0x2f
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <HLCD_VoidInit+0xd6>
    1b98:	88 ec       	ldi	r24, 0xC8	; 200
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9e a7       	std	Y+46, r25	; 0x2e
    1b9e:	8d a7       	std	Y+45, r24	; 0x2d
    1ba0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <HLCD_VoidInit+0xc4>
    1ba8:	9e a7       	std	Y+46, r25	; 0x2e
    1baa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bae:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	98 ab       	std	Y+48, r25	; 0x30
    1bb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <HLCD_VoidInit+0xb8>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <HLCD_VoidInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	98 ab       	std	Y+48, r25	; 0x30
    1bd2:	8f a7       	std	Y+47, r24	; 0x2f
    1bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd8:	9c a7       	std	Y+44, r25	; 0x2c
    1bda:	8b a7       	std	Y+43, r24	; 0x2b
    1bdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bde:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <HLCD_VoidInit+0x100>
    1be4:	9c a7       	std	Y+44, r25	; 0x2c
    1be6:	8b a7       	std	Y+43, r24	; 0x2b

	// wait for 30ms
	_delay_ms(30);
	// function Set 0b00111100
	HLCD_VoidSendCommand(LCD_functionSet);
    1be8:	8c e3       	ldi	r24, 0x3C	; 60
    1bea:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e8       	ldi	r26, 0x80	; 128
    1bf4:	bf e3       	ldi	r27, 0x3F	; 63
    1bf6:	8f a3       	std	Y+39, r24	; 0x27
    1bf8:	98 a7       	std	Y+40, r25	; 0x28
    1bfa:	a9 a7       	std	Y+41, r26	; 0x29
    1bfc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1c00:	78 a5       	ldd	r23, Y+40	; 0x28
    1c02:	89 a5       	ldd	r24, Y+41	; 0x29
    1c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a ef       	ldi	r20, 0xFA	; 250
    1c0c:	54 e4       	ldi	r21, 0x44	; 68
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8b a3       	std	Y+35, r24	; 0x23
    1c18:	9c a3       	std	Y+36, r25	; 0x24
    1c1a:	ad a3       	std	Y+37, r26	; 0x25
    1c1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c20:	7c a1       	ldd	r23, Y+36	; 0x24
    1c22:	8d a1       	ldd	r24, Y+37	; 0x25
    1c24:	9e a1       	ldd	r25, Y+38	; 0x26
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <HLCD_VoidInit+0x160>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9a a3       	std	Y+34, r25	; 0x22
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <HLCD_VoidInit+0x1de>
	else if (__tmp > 65535)
    1c40:	6b a1       	ldd	r22, Y+35	; 0x23
    1c42:	7c a1       	ldd	r23, Y+36	; 0x24
    1c44:	8d a1       	ldd	r24, Y+37	; 0x25
    1c46:	9e a1       	ldd	r25, Y+38	; 0x26
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <HLCD_VoidInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9a a3       	std	Y+34, r25	; 0x22
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <HLCD_VoidInit+0x1c0>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	98 a3       	std	Y+32, r25	; 0x20
    1c88:	8f 8f       	std	Y+31, r24	; 0x1f
    1c8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <HLCD_VoidInit+0x1ae>
    1c92:	98 a3       	std	Y+32, r25	; 0x20
    1c94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9a a3       	std	Y+34, r25	; 0x22
    1c9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <HLCD_VoidInit+0x1a2>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <HLCD_VoidInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cac:	7c a1       	ldd	r23, Y+36	; 0x24
    1cae:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9a a3       	std	Y+34, r25	; 0x22
    1cbc:	89 a3       	std	Y+33, r24	; 0x21
    1cbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc4:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <HLCD_VoidInit+0x1ea>
    1cce:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd0:	8d 8f       	std	Y+29, r24	; 0x1d
	// wait for 39 us -> 1ms
	_delay_ms(1);
	// Dispaly ON/OFF 0b00001100
	HLCD_VoidSendCommand(LCD_DispalyOnOff);
    1cd2:	8c e0       	ldi	r24, 0x0C	; 12
    1cd4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e8       	ldi	r26, 0x80	; 128
    1cde:	bf e3       	ldi	r27, 0x3F	; 63
    1ce0:	89 8f       	std	Y+25, r24	; 0x19
    1ce2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8d 8b       	std	Y+21, r24	; 0x15
    1d02:	9e 8b       	std	Y+22, r25	; 0x16
    1d04:	af 8b       	std	Y+23, r26	; 0x17
    1d06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d08:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <HLCD_VoidInit+0x24a>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <HLCD_VoidInit+0x2c8>
	else if (__tmp > 65535)
    1d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	98 8d       	ldd	r25, Y+24	; 0x18
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <HLCD_VoidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	69 8d       	ldd	r22, Y+25	; 0x19
    1d44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9c 8b       	std	Y+20, r25	; 0x14
    1d68:	8b 8b       	std	Y+19, r24	; 0x13
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <HLCD_VoidInit+0x2aa>
    1d6c:	88 ec       	ldi	r24, 0xC8	; 200
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9a 8b       	std	Y+18, r25	; 0x12
    1d72:	89 8b       	std	Y+17, r24	; 0x11
    1d74:	89 89       	ldd	r24, Y+17	; 0x11
    1d76:	9a 89       	ldd	r25, Y+18	; 0x12
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <HLCD_VoidInit+0x298>
    1d7c:	9a 8b       	std	Y+18, r25	; 0x12
    1d7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8b 89       	ldd	r24, Y+19	; 0x13
    1d82:	9c 89       	ldd	r25, Y+20	; 0x14
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <HLCD_VoidInit+0x28c>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <HLCD_VoidInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9c 8b       	std	Y+20, r25	; 0x14
    1da6:	8b 8b       	std	Y+19, r24	; 0x13
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	98 8b       	std	Y+16, r25	; 0x10
    1dae:	8f 87       	std	Y+15, r24	; 0x0f
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	98 89       	ldd	r25, Y+16	; 0x10
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <HLCD_VoidInit+0x2d4>
    1db8:	98 8b       	std	Y+16, r25	; 0x10
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
	// wait for 39 us -> 1ms
	_delay_ms(1);
	// Dispaly clear 0b00000001
	HLCD_VoidSendCommand(LCD_Dispalyclear);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e0       	ldi	r26, 0x00	; 0
    1dc8:	b0 e4       	ldi	r27, 0x40	; 64
    1dca:	8b 87       	std	Y+11, r24	; 0x0b
    1dcc:	9c 87       	std	Y+12, r25	; 0x0c
    1dce:	ad 87       	std	Y+13, r26	; 0x0d
    1dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a ef       	ldi	r20, 0xFA	; 250
    1de0:	54 e4       	ldi	r21, 0x44	; 68
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8f 83       	std	Y+7, r24	; 0x07
    1dec:	98 87       	std	Y+8, r25	; 0x08
    1dee:	a9 87       	std	Y+9, r26	; 0x09
    1df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <HLCD_VoidInit+0x334>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <HLCD_VoidInit+0x3b2>
	else if (__tmp > 65535)
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	78 85       	ldd	r23, Y+8	; 0x08
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <HLCD_VoidInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <HLCD_VoidInit+0x394>
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9c 83       	std	Y+4, r25	; 0x04
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <HLCD_VoidInit+0x382>
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <HLCD_VoidInit+0x376>
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <HLCD_VoidInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <HLCD_VoidInit+0x3be>
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms -> 2ms
	_delay_ms(2);
	// Entry Mode 0b00000110
	HLCD_VoidSendCommand(LCD_EntryMode);
    1ea6:	86 e0       	ldi	r24, 0x06	; 6
    1ea8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>
	//_delay_ms(1);
}
    1eac:	e8 96       	adiw	r28, 0x38	; 56
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <HLCD_VoidClear>:



void HLCD_VoidClear()
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
	//display clear
	HLCD_VoidSendCommand(1);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e0       	ldi	r26, 0x00	; 0
    1ede:	b0 e4       	ldi	r27, 0x40	; 64
    1ee0:	8b 87       	std	Y+11, r24	; 0x0b
    1ee2:	9c 87       	std	Y+12, r25	; 0x0c
    1ee4:	ad 87       	std	Y+13, r26	; 0x0d
    1ee6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a ef       	ldi	r20, 0xFA	; 250
    1ef6:	54 e4       	ldi	r21, 0x44	; 68
    1ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	8f 83       	std	Y+7, r24	; 0x07
    1f02:	98 87       	std	Y+8, r25	; 0x08
    1f04:	a9 87       	std	Y+9, r26	; 0x09
    1f06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f08:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0a:	78 85       	ldd	r23, Y+8	; 0x08
    1f0c:	89 85       	ldd	r24, Y+9	; 0x09
    1f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <HLCD_VoidClear+0x6c>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <HLCD_VoidClear+0xea>
	else if (__tmp > 65535)
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <HLCD_VoidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <HLCD_VoidClear+0xcc>
    1f6c:	88 ec       	ldi	r24, 0xC8	; 200
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <HLCD_VoidClear+0xba>
    1f7c:	9c 83       	std	Y+4, r25	; 0x04
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <HLCD_VoidClear+0xae>
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <HLCD_VoidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	6f 81       	ldd	r22, Y+7	; 0x07
    1f96:	78 85       	ldd	r23, Y+8	; 0x08
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <HLCD_VoidClear+0xf6>
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

//	G_u8_Cursor_Pos  = 0;
//	G_u8_Cursor_Line = 0;
}
    1fbc:	2e 96       	adiw	r28, 0x0e	; 14
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <HLCD_VoidCursor>:


void HLCD_VoidCursor(u8 A_u8_Pos,u8 A_u8_Line)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <HLCD_VoidCursor+0x6>
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <HLCD_VoidCursor+0x8>
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_Line)
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	3c 83       	std	Y+4, r19	; 0x04
    1fe6:	2b 83       	std	Y+3, r18	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	31 f0       	breq	.+12     	; 0x1ffc <HLCD_VoidCursor+0x2e>
    1ff0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff4:	21 30       	cpi	r18, 0x01	; 1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	31 f0       	breq	.+12     	; 0x2006 <HLCD_VoidCursor+0x38>
    1ffa:	09 c0       	rjmp	.+18     	; 0x200e <HLCD_VoidCursor+0x40>
	{
	case LINE0 : HLCD_VoidSendCommand( 0X80 + A_u8_Pos); break;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	80 58       	subi	r24, 0x80	; 128
    2000:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>
    2004:	04 c0       	rjmp	.+8      	; 0x200e <HLCD_VoidCursor+0x40>

	case LINE1 : HLCD_VoidSendCommand( 0XC0 + A_u8_Pos); break;
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	80 54       	subi	r24, 0x40	; 64
    200a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>
	}
//	G_u8_Cursor_Pos  = A_u8_Pos;
//	G_u8_Cursor_Line = A_u8_Line;
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <HLCD_VoidSendString>:


void HLCD_VoidSendString(char *A_u8_PtrString)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <HLCD_VoidSendString+0x6>
    2022:	00 d0       	rcall	.+0      	; 0x2024 <HLCD_VoidSendString+0x8>
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
	u8 L_u8_Counter    = 0;
    202c:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_u8_Cursor_Pos = 0;
    202e:	19 82       	std	Y+1, r1	; 0x01
    2030:	1a c0       	rjmp	.+52     	; 0x2066 <HLCD_VoidSendString+0x4a>


	while( (A_u8_PtrString[L_u8_Counter]) != '\0')
	{
		if(L_u8_Cursor_Pos > 15)
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	80 31       	cpi	r24, 0x10	; 16
    2036:	28 f0       	brcs	.+10     	; 0x2042 <HLCD_VoidSendString+0x26>
			{
				HLCD_VoidCursor(0,LINE1);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
				L_u8_Cursor_Pos  = 0;
    2040:	19 82       	std	Y+1, r1	; 0x01

//				G_u8_Cursor_Line = 1;
//				G_u8_Cursor_Pos  = 0;
			}

		HLCD_VoidSendData(A_u8_PtrString[L_u8_Counter++]);
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	fc 01       	movw	r30, r24
    204e:	e2 0f       	add	r30, r18
    2050:	f3 1f       	adc	r31, r19
    2052:	90 81       	ld	r25, Z
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	8a 83       	std	Y+2, r24	; 0x02
    205a:	89 2f       	mov	r24, r25
    205c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
		L_u8_Cursor_Pos++;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	8f 5f       	subi	r24, 0xFF	; 255
    2064:	89 83       	std	Y+1, r24	; 0x01
{
	u8 L_u8_Counter    = 0;
	u8 L_u8_Cursor_Pos = 0;


	while( (A_u8_PtrString[L_u8_Counter]) != '\0')
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	fc 01       	movw	r30, r24
    2072:	e2 0f       	add	r30, r18
    2074:	f3 1f       	adc	r31, r19
    2076:	80 81       	ld	r24, Z
    2078:	88 23       	and	r24, r24
    207a:	d9 f6       	brne	.-74     	; 0x2032 <HLCD_VoidSendString+0x16>

		//G_u8_Cursor_Pos++;

	}

}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <HLCD_VoidSendNumber>:
void HLCD_VoidSendNumber(s32 A_s32_Number  )
{
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	28 97       	sbiw	r28, 0x08	; 8
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	6d 83       	std	Y+5, r22	; 0x05
    20a8:	7e 83       	std	Y+6, r23	; 0x06
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
	u32 L_u32_TempNum=1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 e0       	ldi	r26, 0x00	; 0
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	ab 83       	std	Y+3, r26	; 0x03
    20bc:	bc 83       	std	Y+4, r27	; 0x04

	if(A_s32_Number==0)
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	af 81       	ldd	r26, Y+7	; 0x07
    20c4:	b8 85       	ldd	r27, Y+8	; 0x08
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	a1 05       	cpc	r26, r1
    20ca:	b1 05       	cpc	r27, r1
    20cc:	21 f4       	brne	.+8      	; 0x20d6 <HLCD_VoidSendNumber+0x4c>
	{
		HLCD_VoidSendData('0');
    20ce:	80 e3       	ldi	r24, 0x30	; 48
    20d0:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
    20d4:	85 c0       	rjmp	.+266    	; 0x21e0 <HLCD_VoidSendNumber+0x156>

		//G_u8_Cursor_Pos++;
		return;
	}
	if(A_s32_Number<0)
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	af 81       	ldd	r26, Y+7	; 0x07
    20dc:	b8 85       	ldd	r27, Y+8	; 0x08
    20de:	bb 23       	and	r27, r27
    20e0:	0c f0       	brlt	.+2      	; 0x20e4 <HLCD_VoidSendNumber+0x5a>
    20e2:	49 c0       	rjmp	.+146    	; 0x2176 <HLCD_VoidSendNumber+0xec>
	{
		HLCD_VoidSendData('-');
    20e4:	8d e2       	ldi	r24, 0x2D	; 45
    20e6:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
		A_s32_Number *= -1;
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	af 81       	ldd	r26, Y+7	; 0x07
    20f0:	b8 85       	ldd	r27, Y+8	; 0x08
    20f2:	b0 95       	com	r27
    20f4:	a0 95       	com	r26
    20f6:	90 95       	com	r25
    20f8:	81 95       	neg	r24
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	af 4f       	sbci	r26, 0xFF	; 255
    20fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	af 83       	std	Y+7, r26	; 0x07
    2106:	b8 87       	std	Y+8, r27	; 0x08
    2108:	36 c0       	rjmp	.+108    	; 0x2176 <HLCD_VoidSendNumber+0xec>
		//G_u8_Cursor_Pos++;
	}

	while (A_s32_Number != 0)
	{
		L_u32_TempNum = (L_u32_TempNum * 10) + (A_s32_Number%10);
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	9a 81       	ldd	r25, Y+2	; 0x02
    210e:	ab 81       	ldd	r26, Y+3	; 0x03
    2110:	bc 81       	ldd	r27, Y+4	; 0x04
    2112:	2a e0       	ldi	r18, 0x0A	; 10
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__mulsi3>
    2122:	7b 01       	movw	r14, r22
    2124:	8c 01       	movw	r16, r24
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	af 81       	ldd	r26, Y+7	; 0x07
    212c:	b8 85       	ldd	r27, Y+8	; 0x08
    212e:	2a e0       	ldi	r18, 0x0A	; 10
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__divmodsi4>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	8e 0d       	add	r24, r14
    2144:	9f 1d       	adc	r25, r15
    2146:	a0 1f       	adc	r26, r16
    2148:	b1 1f       	adc	r27, r17
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	ab 83       	std	Y+3, r26	; 0x03
    2150:	bc 83       	std	Y+4, r27	; 0x04
		A_s32_Number /= 10;
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	af 81       	ldd	r26, Y+7	; 0x07
    2158:	b8 85       	ldd	r27, Y+8	; 0x08
    215a:	2a e0       	ldi	r18, 0x0A	; 10
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	50 e0       	ldi	r21, 0x00	; 0
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__divmodsi4>
    216a:	da 01       	movw	r26, r20
    216c:	c9 01       	movw	r24, r18
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	af 83       	std	Y+7, r26	; 0x07
    2174:	b8 87       	std	Y+8, r27	; 0x08
		A_s32_Number *= -1;

		//G_u8_Cursor_Pos++;
	}

	while (A_s32_Number != 0)
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	af 81       	ldd	r26, Y+7	; 0x07
    217c:	b8 85       	ldd	r27, Y+8	; 0x08
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	a1 05       	cpc	r26, r1
    2182:	b1 05       	cpc	r27, r1
    2184:	11 f6       	brne	.-124    	; 0x210a <HLCD_VoidSendNumber+0x80>
    2186:	23 c0       	rjmp	.+70     	; 0x21ce <HLCD_VoidSendNumber+0x144>
//				G_u8_Cursor_Pos  = 0;
//				G_u8_Cursor_Line = 1;

//			}

		HLCD_VoidSendData((L_u32_TempNum % 10)+48);
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	ab 81       	ldd	r26, Y+3	; 0x03
    218e:	bc 81       	ldd	r27, Y+4	; 0x04
    2190:	2a e0       	ldi	r18, 0x0A	; 10
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	80 5d       	subi	r24, 0xD0	; 208
    21a6:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
		L_u32_TempNum /= 10;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	ab 81       	ldd	r26, Y+3	; 0x03
    21b0:	bc 81       	ldd	r27, Y+4	; 0x04
    21b2:	2a e0       	ldi	r18, 0x0A	; 10
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    21c2:	da 01       	movw	r26, r20
    21c4:	c9 01       	movw	r24, r18
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	ab 83       	std	Y+3, r26	; 0x03
    21cc:	bc 83       	std	Y+4, r27	; 0x04
	{
		L_u32_TempNum = (L_u32_TempNum * 10) + (A_s32_Number%10);
		A_s32_Number /= 10;
	}

	while(L_u32_TempNum != 1)
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	ab 81       	ldd	r26, Y+3	; 0x03
    21d4:	bc 81       	ldd	r27, Y+4	; 0x04
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	91 05       	cpc	r25, r1
    21da:	a1 05       	cpc	r26, r1
    21dc:	b1 05       	cpc	r27, r1
    21de:	a1 f6       	brne	.-88     	; 0x2188 <HLCD_VoidSendNumber+0xfe>
		//G_u8_Cursor_Pos++;
	}



}
    21e0:	28 96       	adiw	r28, 0x08	; 8
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	ff 90       	pop	r15
    21f6:	ef 90       	pop	r14
    21f8:	08 95       	ret

000021fa <HLCD_VoidSaveCustomChar>:

void HLCD_VoidSaveCustomChar(u8 A_u8_CGRAMIndex, u8 A_u8_CustomArray[])
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <HLCD_VoidSaveCustomChar+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <HLCD_VoidSaveCustomChar+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	7c 83       	std	Y+4, r23	; 0x04
    220a:	6b 83       	std	Y+3, r22	; 0x03
	HLCD_VoidSendCommand( 0b01000000 + ( A_u8_CGRAMIndex * 8 ) );
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	08 96       	adiw	r24, 0x08	; 8
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>

	for(u8 L_u8_Index = 0; L_u8_Index < 8; L_u8_Index++ )
    2224:	19 82       	std	Y+1, r1	; 0x01
    2226:	0e c0       	rjmp	.+28     	; 0x2244 <HLCD_VoidSaveCustomChar+0x4a>
	{
		HLCD_VoidSendData(A_u8_CustomArray[L_u8_Index]);
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	fc 01       	movw	r30, r24
    2234:	e2 0f       	add	r30, r18
    2236:	f3 1f       	adc	r31, r19
    2238:	80 81       	ld	r24, Z
    223a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>

void HLCD_VoidSaveCustomChar(u8 A_u8_CGRAMIndex, u8 A_u8_CustomArray[])
{
	HLCD_VoidSendCommand( 0b01000000 + ( A_u8_CGRAMIndex * 8 ) );

	for(u8 L_u8_Index = 0; L_u8_Index < 8; L_u8_Index++ )
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	8f 5f       	subi	r24, 0xFF	; 255
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	88 30       	cpi	r24, 0x08	; 8
    2248:	78 f3       	brcs	.-34     	; 0x2228 <HLCD_VoidSaveCustomChar+0x2e>
	case LINE0 : HLCD_VoidSendCommand( 0X80 + G_u8_Cursor_Pos); break;

	case LINE1  : HLCD_VoidSendCommand( 0XC0 + G_u8_Cursor_Pos); break;
	}*/

	HLCD_VoidSendCommand(0x80);
    224a:	80 e8       	ldi	r24, 0x80	; 128
    224c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <HLCD_VoidSendCommand>
}
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <HLCD_VoidDisplayCustomChar>:

void HLCD_VoidDisplayCustomChar(u8 A_u8_CGRAMIndex)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	0f 92       	push	r0
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8_CGRAMIndex < 8)
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	88 30       	cpi	r24, 0x08	; 8
    226e:	18 f4       	brcc	.+6      	; 0x2276 <HLCD_VoidDisplayCustomChar+0x18>
	{
		HLCD_VoidSendData(A_u8_CGRAMIndex);
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
	}
		//G_u8_Cursor_Pos++;
}
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <HKPD_VoidInit>:
#else
#error "Choose the right configuration"
#endif

void HKPD_VoidInit()
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	2e 97       	sbiw	r28, 0x0e	; 14
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61

	MDIO_voidSetPortDirection(KPD_PORT, 0x0f);
	MDIO_voidSetPortValue(KPD_PORT,0xff);

#elif (RowNum == 4 && ColNum == 3 )
	MDIO_voidSetPortDirection(KPD_PORT, 0b00000111);
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	67 e0       	ldi	r22, 0x07	; 7
    2296:	0e 94 8d 07 	call	0xf1a	; 0xf1a <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(KPD_PORT,0xff);
    229a:	82 e0       	ldi	r24, 0x02	; 2
    229c:	6f ef       	ldi	r22, 0xFF	; 255
    229e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <MDIO_voidSetPortValue>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a0 e2       	ldi	r26, 0x20	; 32
    22a8:	b1 e4       	ldi	r27, 0x41	; 65
    22aa:	8b 87       	std	Y+11, r24	; 0x0b
    22ac:	9c 87       	std	Y+12, r25	; 0x0c
    22ae:	ad 87       	std	Y+13, r26	; 0x0d
    22b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a ef       	ldi	r20, 0xFA	; 250
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8f 83       	std	Y+7, r24	; 0x07
    22cc:	98 87       	std	Y+8, r25	; 0x08
    22ce:	a9 87       	std	Y+9, r26	; 0x09
    22d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <HKPD_VoidInit+0x76>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <HKPD_VoidInit+0xf4>
	else if (__tmp > 65535)
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <HKPD_VoidInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	6b 85       	ldd	r22, Y+11	; 0x0b
    230e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2310:	8d 85       	ldd	r24, Y+13	; 0x0d
    2312:	9e 85       	ldd	r25, Y+14	; 0x0e
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <HKPD_VoidInit+0xd6>
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <HKPD_VoidInit+0xc4>
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <HKPD_VoidInit+0xb8>
    235c:	14 c0       	rjmp	.+40     	; 0x2386 <HKPD_VoidInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	6f 81       	ldd	r22, Y+7	; 0x07
    2360:	78 85       	ldd	r23, Y+8	; 0x08
    2362:	89 85       	ldd	r24, Y+9	; 0x09
    2364:	9a 85       	ldd	r25, Y+10	; 0x0a
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <HKPD_VoidInit+0x100>
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(10);
}
    2386:	2e 96       	adiw	r28, 0x0e	; 14
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <HKPD_u8GetPressedKey>:


u8 HKPD_u8GetPressedKey()
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	62 97       	sbiw	r28, 0x12	; 18
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
	HKPD_VoidInit();
    23ac:	0e 94 3f 11 	call	0x227e	; 0x227e <HKPD_VoidInit>
u8 L_u8_PressedKey, L_u8_Stop=1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	b5 c0       	rjmp	.+362    	; 0x2520 <HKPD_u8GetPressedKey+0x188>


while(L_u8_Stop)
{
	for(u8 Col = 0 ; Col < ColNum ; Col++ )
    23b6:	18 8a       	std	Y+16, r1	; 0x10
    23b8:	af c0       	rjmp	.+350    	; 0x2518 <HKPD_u8GetPressedKey+0x180>
	{

		MDIO_voidSetPinValue ( KPD_PORT ,Col, LOW );
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	68 89       	ldd	r22, Y+16	; 0x10
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>

		for(u8 Row = 0 ; Row < RowNum ; Row++ )
    23c4:	1f 86       	std	Y+15, r1	; 0x0f
    23c6:	9c c0       	rjmp	.+312    	; 0x2500 <HKPD_u8GetPressedKey+0x168>
		{
			if(MDIO_u8GetPinValue(KPD_PORT, Row+ColNum ) == LOW)
    23c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ca:	98 2f       	mov	r25, r24
    23cc:	9d 5f       	subi	r25, 0xFD	; 253
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	69 2f       	mov	r22, r25
    23d2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <MDIO_u8GetPinValue>
    23d6:	88 23       	and	r24, r24
    23d8:	09 f0       	breq	.+2      	; 0x23dc <HKPD_u8GetPressedKey+0x44>
    23da:	8f c0       	rjmp	.+286    	; 0x24fa <HKPD_u8GetPressedKey+0x162>
			{
				L_u8_PressedKey=G_u8_Matrix[Row][Col];
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	88 89       	ldd	r24, Y+16	; 0x10
    23e4:	48 2f       	mov	r20, r24
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	c9 01       	movw	r24, r18
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	82 0f       	add	r24, r18
    23f0:	93 1f       	adc	r25, r19
    23f2:	84 0f       	add	r24, r20
    23f4:	95 1f       	adc	r25, r21
    23f6:	fc 01       	movw	r30, r24
    23f8:	e9 5b       	subi	r30, 0xB9	; 185
    23fa:	fe 4f       	sbci	r31, 0xFE	; 254
    23fc:	80 81       	ld	r24, Z
    23fe:	8a 8b       	std	Y+18, r24	; 0x12
				while(MDIO_u8GetPinValue(KPD_PORT, Row+ColNum ) == LOW ){}
    2400:	8f 85       	ldd	r24, Y+15	; 0x0f
    2402:	98 2f       	mov	r25, r24
    2404:	9d 5f       	subi	r25, 0xFD	; 253
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	69 2f       	mov	r22, r25
    240a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <MDIO_u8GetPinValue>
    240e:	88 23       	and	r24, r24
    2410:	b9 f3       	breq	.-18     	; 0x2400 <HKPD_u8GetPressedKey+0x68>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 e2       	ldi	r26, 0x20	; 32
    2418:	b1 e4       	ldi	r27, 0x41	; 65
    241a:	8b 87       	std	Y+11, r24	; 0x0b
    241c:	9c 87       	std	Y+12, r25	; 0x0c
    241e:	ad 87       	std	Y+13, r26	; 0x0d
    2420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6b 85       	ldd	r22, Y+11	; 0x0b
    2424:	7c 85       	ldd	r23, Y+12	; 0x0c
    2426:	8d 85       	ldd	r24, Y+13	; 0x0d
    2428:	9e 85       	ldd	r25, Y+14	; 0x0e
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a ef       	ldi	r20, 0xFA	; 250
    2430:	54 e4       	ldi	r21, 0x44	; 68
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	8f 83       	std	Y+7, r24	; 0x07
    243c:	98 87       	std	Y+8, r25	; 0x08
    243e:	a9 87       	std	Y+9, r26	; 0x09
    2440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <HKPD_u8GetPressedKey+0xcc>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <HKPD_u8GetPressedKey+0x14a>
	else if (__tmp > 65535)
    2464:	6f 81       	ldd	r22, Y+7	; 0x07
    2466:	78 85       	ldd	r23, Y+8	; 0x08
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <HKPD_u8GetPressedKey+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	6b 85       	ldd	r22, Y+11	; 0x0b
    247e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2480:	8d 85       	ldd	r24, Y+13	; 0x0d
    2482:	9e 85       	ldd	r25, Y+14	; 0x0e
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <HKPD_u8GetPressedKey+0x12c>
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <HKPD_u8GetPressedKey+0x11a>
    24b6:	9c 83       	std	Y+4, r25	; 0x04
    24b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <HKPD_u8GetPressedKey+0x10e>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <HKPD_u8GetPressedKey+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <HKPD_u8GetPressedKey+0x156>
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				L_u8_Stop=0;
    24f6:	19 8a       	std	Y+17, r1	; 0x11
    24f8:	07 c0       	rjmp	.+14     	; 0x2508 <HKPD_u8GetPressedKey+0x170>
	for(u8 Col = 0 ; Col < ColNum ; Col++ )
	{

		MDIO_voidSetPinValue ( KPD_PORT ,Col, LOW );

		for(u8 Row = 0 ; Row < RowNum ; Row++ )
    24fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fc:	8f 5f       	subi	r24, 0xFF	; 255
    24fe:	8f 87       	std	Y+15, r24	; 0x0f
    2500:	8f 85       	ldd	r24, Y+15	; 0x0f
    2502:	84 30       	cpi	r24, 0x04	; 4
    2504:	08 f4       	brcc	.+2      	; 0x2508 <HKPD_u8GetPressedKey+0x170>
    2506:	60 cf       	rjmp	.-320    	; 0x23c8 <HKPD_u8GetPressedKey+0x30>
				L_u8_Stop=0;
				break;
			}

		}
		MDIO_voidSetPinValue ( KPD_PORT ,Col, HIGH);
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	68 89       	ldd	r22, Y+16	; 0x10
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 38 09 	call	0x1270	; 0x1270 <MDIO_voidSetPinValue>
u8 L_u8_PressedKey, L_u8_Stop=1;


while(L_u8_Stop)
{
	for(u8 Col = 0 ; Col < ColNum ; Col++ )
    2512:	88 89       	ldd	r24, Y+16	; 0x10
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	88 8b       	std	Y+16, r24	; 0x10
    2518:	88 89       	ldd	r24, Y+16	; 0x10
    251a:	83 30       	cpi	r24, 0x03	; 3
    251c:	08 f4       	brcc	.+2      	; 0x2520 <HKPD_u8GetPressedKey+0x188>
    251e:	4d cf       	rjmp	.-358    	; 0x23ba <HKPD_u8GetPressedKey+0x22>
{
	HKPD_VoidInit();
u8 L_u8_PressedKey, L_u8_Stop=1;


while(L_u8_Stop)
    2520:	89 89       	ldd	r24, Y+17	; 0x11
    2522:	88 23       	and	r24, r24
    2524:	09 f0       	breq	.+2      	; 0x2528 <HKPD_u8GetPressedKey+0x190>
    2526:	47 cf       	rjmp	.-370    	; 0x23b6 <HKPD_u8GetPressedKey+0x1e>

		}
		MDIO_voidSetPinValue ( KPD_PORT ,Col, HIGH);
	}
}
return L_u8_PressedKey ;
    2528:	8a 89       	ldd	r24, Y+18	; 0x12
}
    252a:	62 96       	adiw	r28, 0x12	; 18
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <main>:

u16 GetNumber();

u8 CheckPassword( u8 A_Bool );

int main(){
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	c6 58       	subi	r28, 0x86	; 134
    254a:	d0 40       	sbci	r29, 0x00	; 0
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61


	HLCD_VoidInit();
    2556:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <HLCD_VoidInit>
	MUART_VoidInit();
    255a:	0e 94 a3 05 	call	0xb46	; 0xb46 <MUART_VoidInit>
	HKPD_VoidInit();
    255e:	0e 94 3f 11 	call	0x227e	; 0x227e <HKPD_VoidInit>

while(1){

	u8 Bool1=9, Bool2=9;
    2562:	fe 01       	movw	r30, r28
    2564:	ec 57       	subi	r30, 0x7C	; 124
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	89 e0       	ldi	r24, 0x09	; 9
    256a:	80 83       	st	Z, r24
    256c:	fe 01       	movw	r30, r28
    256e:	ed 57       	subi	r30, 0x7D	; 125
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	89 e0       	ldi	r24, 0x09	; 9
    2574:	80 83       	st	Z, r24
	u8 Received_Key;
	u8 Pressed_Key;

	if ((Pressed_Key = HKPD_u8GetPressedKey())=='*'
    2576:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    257a:	fe 01       	movw	r30, r28
    257c:	ef 57       	subi	r30, 0x7F	; 127
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 83       	st	Z, r24
    2582:	fe 01       	movw	r30, r28
    2584:	ef 57       	subi	r30, 0x7F	; 127
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	8a 32       	cpi	r24, 0x2A	; 42
    258c:	31 f0       	breq	.+12     	; 0x259a <main+0x5e>
    258e:	fe 01       	movw	r30, r28
    2590:	ef 57       	subi	r30, 0x7F	; 127
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	83 32       	cpi	r24, 0x23	; 35
    2598:	21 f7       	brne	.-56     	; 0x2562 <main+0x26>
	|| Pressed_Key == '#')
	{
		MUART_VoidTransmit('C');
    259a:	83 e4       	ldi	r24, 0x43	; 67
    259c:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
		for(u8 i = 0 ; i < 3 ; i++ )
    25a0:	fe 01       	movw	r30, r28
    25a2:	e0 58       	subi	r30, 0x80	; 128
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	10 82       	st	Z, r1
    25a8:	21 c0       	rjmp	.+66     	; 0x25ec <main+0xb0>
		{
			Bool1 = CheckID();
    25aa:	0e 94 c9 1a 	call	0x3592	; 0x3592 <CheckID>
    25ae:	fe 01       	movw	r30, r28
    25b0:	ec 57       	subi	r30, 0x7C	; 124
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	80 83       	st	Z, r24
			if ( Bool1 == 1 || Bool1 == 2 || Bool1 == 3)
    25b6:	fe 01       	movw	r30, r28
    25b8:	ec 57       	subi	r30, 0x7C	; 124
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	d9 f0       	breq	.+54     	; 0x25f8 <main+0xbc>
    25c2:	fe 01       	movw	r30, r28
    25c4:	ec 57       	subi	r30, 0x7C	; 124
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	82 30       	cpi	r24, 0x02	; 2
    25cc:	a9 f0       	breq	.+42     	; 0x25f8 <main+0xbc>
    25ce:	fe 01       	movw	r30, r28
    25d0:	ec 57       	subi	r30, 0x7C	; 124
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	83 30       	cpi	r24, 0x03	; 3
    25d8:	79 f0       	breq	.+30     	; 0x25f8 <main+0xbc>

	if ((Pressed_Key = HKPD_u8GetPressedKey())=='*'
	|| Pressed_Key == '#')
	{
		MUART_VoidTransmit('C');
		for(u8 i = 0 ; i < 3 ; i++ )
    25da:	de 01       	movw	r26, r28
    25dc:	a0 58       	subi	r26, 0x80	; 128
    25de:	bf 4f       	sbci	r27, 0xFF	; 255
    25e0:	fe 01       	movw	r30, r28
    25e2:	e0 58       	subi	r30, 0x80	; 128
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	8c 93       	st	X, r24
    25ec:	fe 01       	movw	r30, r28
    25ee:	e0 58       	subi	r30, 0x80	; 128
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 81       	ld	r24, Z
    25f4:	83 30       	cpi	r24, 0x03	; 3
    25f6:	c8 f2       	brcs	.-78     	; 0x25aa <main+0x6e>
			if ( Bool1 == 1 || Bool1 == 2 || Bool1 == 3)
				{	break;	}

		}

	if( Bool1 == 1 || Bool1 == 2 || Bool1 == 3)
    25f8:	fe 01       	movw	r30, r28
    25fa:	ec 57       	subi	r30, 0x7C	; 124
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	81 30       	cpi	r24, 0x01	; 1
    2602:	61 f0       	breq	.+24     	; 0x261c <main+0xe0>
    2604:	fe 01       	movw	r30, r28
    2606:	ec 57       	subi	r30, 0x7C	; 124
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	82 30       	cpi	r24, 0x02	; 2
    260e:	31 f0       	breq	.+12     	; 0x261c <main+0xe0>
    2610:	fe 01       	movw	r30, r28
    2612:	ec 57       	subi	r30, 0x7C	; 124
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 81       	ld	r24, Z
    2618:	83 30       	cpi	r24, 0x03	; 3
    261a:	81 f5       	brne	.+96     	; 0x267c <main+0x140>
	{
		for(u8 i = 0 ; i < 3 ; i++ )
    261c:	fe 01       	movw	r30, r28
    261e:	e1 58       	subi	r30, 0x81	; 129
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	10 82       	st	Z, r1
    2624:	25 c0       	rjmp	.+74     	; 0x2670 <main+0x134>
		{
			Bool2=CheckPassword(Bool1);
    2626:	fe 01       	movw	r30, r28
    2628:	ec 57       	subi	r30, 0x7C	; 124
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 81       	ld	r24, Z
    262e:	0e 94 01 1c 	call	0x3802	; 0x3802 <CheckPassword>
    2632:	fe 01       	movw	r30, r28
    2634:	ed 57       	subi	r30, 0x7D	; 125
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 83       	st	Z, r24
			if (Bool2 == 1 || Bool2 == 2 || Bool2 == 3)
    263a:	fe 01       	movw	r30, r28
    263c:	ed 57       	subi	r30, 0x7D	; 125
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	d9 f0       	breq	.+54     	; 0x267c <main+0x140>
    2646:	fe 01       	movw	r30, r28
    2648:	ed 57       	subi	r30, 0x7D	; 125
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 81       	ld	r24, Z
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	a9 f0       	breq	.+42     	; 0x267c <main+0x140>
    2652:	fe 01       	movw	r30, r28
    2654:	ed 57       	subi	r30, 0x7D	; 125
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	83 30       	cpi	r24, 0x03	; 3
    265c:	79 f0       	breq	.+30     	; 0x267c <main+0x140>

		}

	if( Bool1 == 1 || Bool1 == 2 || Bool1 == 3)
	{
		for(u8 i = 0 ; i < 3 ; i++ )
    265e:	de 01       	movw	r26, r28
    2660:	a1 58       	subi	r26, 0x81	; 129
    2662:	bf 4f       	sbci	r27, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	e1 58       	subi	r30, 0x81	; 129
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	8f 5f       	subi	r24, 0xFF	; 255
    266e:	8c 93       	st	X, r24
    2670:	fe 01       	movw	r30, r28
    2672:	e1 58       	subi	r30, 0x81	; 129
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	83 30       	cpi	r24, 0x03	; 3
    267a:	a8 f2       	brcs	.-86     	; 0x2626 <main+0xea>

		}
	}


		switch(Bool2)
    267c:	fe 01       	movw	r30, r28
    267e:	ed 57       	subi	r30, 0x7D	; 125
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	cb 57       	subi	r28, 0x7B	; 123
    268a:	df 4f       	sbci	r29, 0xFF	; 255
    268c:	39 83       	std	Y+1, r19	; 0x01
    268e:	28 83       	st	Y, r18
    2690:	c5 58       	subi	r28, 0x85	; 133
    2692:	d0 40       	sbci	r29, 0x00	; 0
    2694:	cb 57       	subi	r28, 0x7B	; 123
    2696:	df 4f       	sbci	r29, 0xFF	; 255
    2698:	88 81       	ld	r24, Y
    269a:	99 81       	ldd	r25, Y+1	; 0x01
    269c:	c5 58       	subi	r28, 0x85	; 133
    269e:	d0 40       	sbci	r29, 0x00	; 0
    26a0:	82 30       	cpi	r24, 0x02	; 2
    26a2:	91 05       	cpc	r25, r1
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <main+0x16c>
    26a6:	c5 c1       	rjmp	.+906    	; 0x2a32 <main+0x4f6>
    26a8:	cb 57       	subi	r28, 0x7B	; 123
    26aa:	df 4f       	sbci	r29, 0xFF	; 255
    26ac:	e8 81       	ld	r30, Y
    26ae:	f9 81       	ldd	r31, Y+1	; 0x01
    26b0:	c5 58       	subi	r28, 0x85	; 133
    26b2:	d0 40       	sbci	r29, 0x00	; 0
    26b4:	e3 30       	cpi	r30, 0x03	; 3
    26b6:	f1 05       	cpc	r31, r1
    26b8:	09 f4       	brne	.+2      	; 0x26bc <main+0x180>
    26ba:	6c c3       	rjmp	.+1752   	; 0x2d94 <main+0x858>
    26bc:	cb 57       	subi	r28, 0x7B	; 123
    26be:	df 4f       	sbci	r29, 0xFF	; 255
    26c0:	28 81       	ld	r18, Y
    26c2:	39 81       	ldd	r19, Y+1	; 0x01
    26c4:	c5 58       	subi	r28, 0x85	; 133
    26c6:	d0 40       	sbci	r29, 0x00	; 0
    26c8:	21 30       	cpi	r18, 0x01	; 1
    26ca:	31 05       	cpc	r19, r1
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <main+0x194>
    26ce:	a4 c4       	rjmp	.+2376   	; 0x3018 <main+0xadc>
		{
		case 1:
			HLCD_VoidClear();
    26d0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
			HLCD_VoidSendString("Welcome");
    26d4:	80 e6       	ldi	r24, 0x60	; 96
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
			HLCD_VoidSendString("Abdelrahman");
    26e4:	88 e6       	ldi	r24, 0x68	; 104
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			MUART_VoidTransmit('M');
    26ec:	8d e4       	ldi	r24, 0x4D	; 77
    26ee:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
    26f2:	fe 01       	movw	r30, r28
    26f4:	e5 58       	subi	r30, 0x85	; 133
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	aa e7       	ldi	r26, 0x7A	; 122
    26fe:	b4 e4       	ldi	r27, 0x44	; 68
    2700:	80 83       	st	Z, r24
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	a2 83       	std	Z+2, r26	; 0x02
    2706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	8e 01       	movw	r16, r28
    270a:	09 58       	subi	r16, 0x89	; 137
    270c:	1f 4f       	sbci	r17, 0xFF	; 255
    270e:	fe 01       	movw	r30, r28
    2710:	e5 58       	subi	r30, 0x85	; 133
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a ef       	ldi	r20, 0xFA	; 250
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	f8 01       	movw	r30, r16
    272e:	80 83       	st	Z, r24
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	a2 83       	std	Z+2, r26	; 0x02
    2734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2736:	fe 01       	movw	r30, r28
    2738:	e9 58       	subi	r30, 0x89	; 137
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e8       	ldi	r20, 0x80	; 128
    274a:	5f e3       	ldi	r21, 0x3F	; 63
    274c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2750:	88 23       	and	r24, r24
    2752:	44 f4       	brge	.+16     	; 0x2764 <main+0x228>
		__ticks = 1;
    2754:	fe 01       	movw	r30, r28
    2756:	eb 58       	subi	r30, 0x8B	; 139
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
    2762:	64 c0       	rjmp	.+200    	; 0x282c <main+0x2f0>
	else if (__tmp > 65535)
    2764:	fe 01       	movw	r30, r28
    2766:	e9 58       	subi	r30, 0x89	; 137
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	0c f0       	brlt	.+2      	; 0x2784 <main+0x248>
    2782:	43 c0       	rjmp	.+134    	; 0x280a <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	fe 01       	movw	r30, r28
    2786:	e5 58       	subi	r30, 0x85	; 133
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	93 81       	ldd	r25, Z+3	; 0x03
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e2       	ldi	r20, 0x20	; 32
    2798:	51 e4       	ldi	r21, 0x41	; 65
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	8e 01       	movw	r16, r28
    27a4:	0b 58       	subi	r16, 0x8B	; 139
    27a6:	1f 4f       	sbci	r17, 0xFF	; 255
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	f8 01       	movw	r30, r16
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
    27ba:	1f c0       	rjmp	.+62     	; 0x27fa <main+0x2be>
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 58       	subi	r30, 0x8D	; 141
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	88 ec       	ldi	r24, 0xC8	; 200
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	80 83       	st	Z, r24
    27ca:	fe 01       	movw	r30, r28
    27cc:	ed 58       	subi	r30, 0x8D	; 141
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <main+0x298>
    27d8:	fe 01       	movw	r30, r28
    27da:	ed 58       	subi	r30, 0x8D	; 141
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	de 01       	movw	r26, r28
    27e4:	ab 58       	subi	r26, 0x8B	; 139
    27e6:	bf 4f       	sbci	r27, 0xFF	; 255
    27e8:	fe 01       	movw	r30, r28
    27ea:	eb 58       	subi	r30, 0x8B	; 139
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	11 96       	adiw	r26, 0x01	; 1
    27f6:	9c 93       	st	X, r25
    27f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	fe 01       	movw	r30, r28
    27fc:	eb 58       	subi	r30, 0x8B	; 139
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	d1 f6       	brne	.-76     	; 0x27bc <main+0x280>
    2808:	27 c0       	rjmp	.+78     	; 0x2858 <main+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280a:	8e 01       	movw	r16, r28
    280c:	0b 58       	subi	r16, 0x8B	; 139
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	fe 01       	movw	r30, r28
    2812:	e9 58       	subi	r30, 0x89	; 137
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	f8 01       	movw	r30, r16
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
    282c:	de 01       	movw	r26, r28
    282e:	af 58       	subi	r26, 0x8F	; 143
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	eb 58       	subi	r30, 0x8B	; 139
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	8d 93       	st	X+, r24
    283e:	9c 93       	st	X, r25
    2840:	fe 01       	movw	r30, r28
    2842:	ef 58       	subi	r30, 0x8F	; 143
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	91 81       	ldd	r25, Z+1	; 0x01
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <main+0x30e>
    284e:	fe 01       	movw	r30, r28
    2850:	ef 58       	subi	r30, 0x8F	; 143
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24

			_delay_ms(1000);

			HLCD_VoidClear();
    2858:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
			HLCD_VoidSendString("Please wait for");
    285c:	84 e7       	ldi	r24, 0x74	; 116
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
			HLCD_VoidSendString("admin approval");
    286c:	84 e8       	ldi	r24, 0x84	; 132
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>

			while ((Received_Key = MUART_u8Receive()) != 'P'
    2874:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
    2878:	fe 01       	movw	r30, r28
    287a:	ee 57       	subi	r30, 0x7E	; 126
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 83       	st	Z, r24
    2880:	fe 01       	movw	r30, r28
    2882:	ee 57       	subi	r30, 0x7E	; 126
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	80 35       	cpi	r24, 0x50	; 80
    288a:	31 f0       	breq	.+12     	; 0x2898 <main+0x35c>
    288c:	fe 01       	movw	r30, r28
    288e:	ee 57       	subi	r30, 0x7E	; 126
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	88 35       	cpi	r24, 0x58	; 88
    2896:	71 f7       	brne	.-36     	; 0x2874 <main+0x338>
				 && Received_Key  != 'X');

		HLCD_VoidClear();
    2898:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
		if(Received_Key  == 'P')
    289c:	fe 01       	movw	r30, r28
    289e:	ee 57       	subi	r30, 0x7E	; 126
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	80 35       	cpi	r24, 0x50	; 80
    28a6:	29 f4       	brne	.+10     	; 0x28b2 <main+0x376>
			{
				HLCD_VoidSendString("You can pass now");
    28a8:	83 e9       	ldi	r24, 0x93	; 147
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    28b0:	0a c0       	rjmp	.+20     	; 0x28c6 <main+0x38a>
			}
		else if(Received_Key == 'X')
    28b2:	fe 01       	movw	r30, r28
    28b4:	ee 57       	subi	r30, 0x7E	; 126
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	88 35       	cpi	r24, 0x58	; 88
    28bc:	21 f4       	brne	.+8      	; 0x28c6 <main+0x38a>
			{
				HLCD_VoidSendString("You can't pass");
    28be:	84 ea       	ldi	r24, 0xA4	; 164
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    28c6:	fe 01       	movw	r30, r28
    28c8:	e3 59       	subi	r30, 0x93	; 147
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	aa e7       	ldi	r26, 0x7A	; 122
    28d2:	b4 e4       	ldi	r27, 0x44	; 68
    28d4:	80 83       	st	Z, r24
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	a2 83       	std	Z+2, r26	; 0x02
    28da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28dc:	8e 01       	movw	r16, r28
    28de:	07 59       	subi	r16, 0x97	; 151
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	fe 01       	movw	r30, r28
    28e4:	e3 59       	subi	r30, 0x93	; 147
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	60 81       	ld	r22, Z
    28ea:	71 81       	ldd	r23, Z+1	; 0x01
    28ec:	82 81       	ldd	r24, Z+2	; 0x02
    28ee:	93 81       	ldd	r25, Z+3	; 0x03
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a ef       	ldi	r20, 0xFA	; 250
    28f6:	54 e4       	ldi	r21, 0x44	; 68
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	f8 01       	movw	r30, r16
    2902:	80 83       	st	Z, r24
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	a2 83       	std	Z+2, r26	; 0x02
    2908:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290a:	fe 01       	movw	r30, r28
    290c:	e7 59       	subi	r30, 0x97	; 151
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	60 81       	ld	r22, Z
    2912:	71 81       	ldd	r23, Z+1	; 0x01
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	44 f4       	brge	.+16     	; 0x2938 <main+0x3fc>
		__ticks = 1;
    2928:	fe 01       	movw	r30, r28
    292a:	e9 59       	subi	r30, 0x99	; 153
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	80 83       	st	Z, r24
    2936:	64 c0       	rjmp	.+200    	; 0x2a00 <main+0x4c4>
	else if (__tmp > 65535)
    2938:	fe 01       	movw	r30, r28
    293a:	e7 59       	subi	r30, 0x97	; 151
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	60 81       	ld	r22, Z
    2940:	71 81       	ldd	r23, Z+1	; 0x01
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	3f ef       	ldi	r19, 0xFF	; 255
    294a:	4f e7       	ldi	r20, 0x7F	; 127
    294c:	57 e4       	ldi	r21, 0x47	; 71
    294e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2952:	18 16       	cp	r1, r24
    2954:	0c f0       	brlt	.+2      	; 0x2958 <main+0x41c>
    2956:	43 c0       	rjmp	.+134    	; 0x29de <main+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2958:	fe 01       	movw	r30, r28
    295a:	e3 59       	subi	r30, 0x93	; 147
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	60 81       	ld	r22, Z
    2960:	71 81       	ldd	r23, Z+1	; 0x01
    2962:	82 81       	ldd	r24, Z+2	; 0x02
    2964:	93 81       	ldd	r25, Z+3	; 0x03
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8e 01       	movw	r16, r28
    2978:	09 59       	subi	r16, 0x99	; 153
    297a:	1f 4f       	sbci	r17, 0xFF	; 255
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	f8 01       	movw	r30, r16
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	80 83       	st	Z, r24
    298e:	1f c0       	rjmp	.+62     	; 0x29ce <main+0x492>
    2990:	fe 01       	movw	r30, r28
    2992:	eb 59       	subi	r30, 0x9B	; 155
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	88 ec       	ldi	r24, 0xC8	; 200
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	80 83       	st	Z, r24
    299e:	fe 01       	movw	r30, r28
    29a0:	eb 59       	subi	r30, 0x9B	; 155
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <main+0x46c>
    29ac:	fe 01       	movw	r30, r28
    29ae:	eb 59       	subi	r30, 0x9B	; 155
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	91 83       	std	Z+1, r25	; 0x01
    29b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	de 01       	movw	r26, r28
    29b8:	a9 59       	subi	r26, 0x99	; 153
    29ba:	bf 4f       	sbci	r27, 0xFF	; 255
    29bc:	fe 01       	movw	r30, r28
    29be:	e9 59       	subi	r30, 0x99	; 153
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	80 81       	ld	r24, Z
    29c4:	91 81       	ldd	r25, Z+1	; 0x01
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	11 96       	adiw	r26, 0x01	; 1
    29ca:	9c 93       	st	X, r25
    29cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ce:	fe 01       	movw	r30, r28
    29d0:	e9 59       	subi	r30, 0x99	; 153
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	d1 f6       	brne	.-76     	; 0x2990 <main+0x454>
    29dc:	27 c0       	rjmp	.+78     	; 0x2a2c <main+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29de:	8e 01       	movw	r16, r28
    29e0:	09 59       	subi	r16, 0x99	; 153
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	fe 01       	movw	r30, r28
    29e6:	e7 59       	subi	r30, 0x97	; 151
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	f8 01       	movw	r30, r16
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	80 83       	st	Z, r24
    2a00:	de 01       	movw	r26, r28
    2a02:	ad 59       	subi	r26, 0x9D	; 157
    2a04:	bf 4f       	sbci	r27, 0xFF	; 255
    2a06:	fe 01       	movw	r30, r28
    2a08:	e9 59       	subi	r30, 0x99	; 153
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
    2a0e:	91 81       	ldd	r25, Z+1	; 0x01
    2a10:	8d 93       	st	X+, r24
    2a12:	9c 93       	st	X, r25
    2a14:	fe 01       	movw	r30, r28
    2a16:	ed 59       	subi	r30, 0x9D	; 157
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 81       	ld	r24, Z
    2a1c:	91 81       	ldd	r25, Z+1	; 0x01
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <main+0x4e2>
    2a22:	fe 01       	movw	r30, r28
    2a24:	ed 59       	subi	r30, 0x9D	; 157
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	80 83       	st	Z, r24
			}
		_delay_ms(1000);
		HLCD_VoidClear();
    2a2c:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
    2a30:	98 cd       	rjmp	.-1232   	; 0x2562 <main+0x26>

		break;

		case 2:
			HLCD_VoidClear();
    2a32:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
			HLCD_VoidSendString("Welcome");
    2a36:	80 e6       	ldi	r24, 0x60	; 96
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
			HLCD_VoidSendString("Amr");
    2a46:	83 eb       	ldi	r24, 0xB3	; 179
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			MUART_VoidTransmit('B');
    2a4e:	82 e4       	ldi	r24, 0x42	; 66
    2a50:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
    2a54:	fe 01       	movw	r30, r28
    2a56:	e1 5a       	subi	r30, 0xA1	; 161
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	aa e7       	ldi	r26, 0x7A	; 122
    2a60:	b4 e4       	ldi	r27, 0x44	; 68
    2a62:	80 83       	st	Z, r24
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	a2 83       	std	Z+2, r26	; 0x02
    2a68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	8e 01       	movw	r16, r28
    2a6c:	05 5a       	subi	r16, 0xA5	; 165
    2a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	e1 5a       	subi	r30, 0xA1	; 161
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	4a ef       	ldi	r20, 0xFA	; 250
    2a84:	54 e4       	ldi	r21, 0x44	; 68
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	f8 01       	movw	r30, r16
    2a90:	80 83       	st	Z, r24
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	a2 83       	std	Z+2, r26	; 0x02
    2a96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e5 5a       	subi	r30, 0xA5	; 165
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	60 81       	ld	r22, Z
    2aa0:	71 81       	ldd	r23, Z+1	; 0x01
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	93 81       	ldd	r25, Z+3	; 0x03
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	44 f4       	brge	.+16     	; 0x2ac6 <main+0x58a>
		__ticks = 1;
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e7 5a       	subi	r30, 0xA7	; 167
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
    2ac4:	64 c0       	rjmp	.+200    	; 0x2b8e <main+0x652>
	else if (__tmp > 65535)
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e5 5a       	subi	r30, 0xA5	; 165
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <main+0x5aa>
    2ae4:	43 c0       	rjmp	.+134    	; 0x2b6c <main+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e1 5a       	subi	r30, 0xA1	; 161
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	60 81       	ld	r22, Z
    2aee:	71 81       	ldd	r23, Z+1	; 0x01
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
    2af2:	93 81       	ldd	r25, Z+3	; 0x03
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e2       	ldi	r20, 0x20	; 32
    2afa:	51 e4       	ldi	r21, 0x41	; 65
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	8e 01       	movw	r16, r28
    2b06:	07 5a       	subi	r16, 0xA7	; 167
    2b08:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	f8 01       	movw	r30, r16
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	80 83       	st	Z, r24
    2b1c:	1f c0       	rjmp	.+62     	; 0x2b5c <main+0x620>
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e9 5a       	subi	r30, 0xA9	; 169
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	88 ec       	ldi	r24, 0xC8	; 200
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e9 5a       	subi	r30, 0xA9	; 169
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <main+0x5fa>
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e9 5a       	subi	r30, 0xA9	; 169
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b44:	de 01       	movw	r26, r28
    2b46:	a7 5a       	subi	r26, 0xA7	; 167
    2b48:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e7 5a       	subi	r30, 0xA7	; 167
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	11 96       	adiw	r26, 0x01	; 1
    2b58:	9c 93       	st	X, r25
    2b5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e7 5a       	subi	r30, 0xA7	; 167
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	d1 f6       	brne	.-76     	; 0x2b1e <main+0x5e2>
    2b6a:	27 c0       	rjmp	.+78     	; 0x2bba <main+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6c:	8e 01       	movw	r16, r28
    2b6e:	07 5a       	subi	r16, 0xA7	; 167
    2b70:	1f 4f       	sbci	r17, 0xFF	; 255
    2b72:	fe 01       	movw	r30, r28
    2b74:	e5 5a       	subi	r30, 0xA5	; 165
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	f8 01       	movw	r30, r16
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	80 83       	st	Z, r24
    2b8e:	de 01       	movw	r26, r28
    2b90:	ab 5a       	subi	r26, 0xAB	; 171
    2b92:	bf 4f       	sbci	r27, 0xFF	; 255
    2b94:	fe 01       	movw	r30, r28
    2b96:	e7 5a       	subi	r30, 0xA7	; 167
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	8d 93       	st	X+, r24
    2ba0:	9c 93       	st	X, r25
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	eb 5a       	subi	r30, 0xAB	; 171
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <main+0x670>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	eb 5a       	subi	r30, 0xAB	; 171
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24

			_delay_ms(1000);

			HLCD_VoidClear();
    2bba:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
			HLCD_VoidSendString("Please wait for");
    2bbe:	84 e7       	ldi	r24, 0x74	; 116
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	61 e0       	ldi	r22, 0x01	; 1
    2bca:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
			HLCD_VoidSendString("admin approval");
    2bce:	84 e8       	ldi	r24, 0x84	; 132
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>

			while ((Received_Key = MUART_u8Receive()) != 'P'
    2bd6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
    2bda:	fe 01       	movw	r30, r28
    2bdc:	ee 57       	subi	r30, 0x7E	; 126
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	80 83       	st	Z, r24
    2be2:	fe 01       	movw	r30, r28
    2be4:	ee 57       	subi	r30, 0x7E	; 126
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	80 35       	cpi	r24, 0x50	; 80
    2bec:	31 f0       	breq	.+12     	; 0x2bfa <main+0x6be>
    2bee:	fe 01       	movw	r30, r28
    2bf0:	ee 57       	subi	r30, 0x7E	; 126
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	88 35       	cpi	r24, 0x58	; 88
    2bf8:	71 f7       	brne	.-36     	; 0x2bd6 <main+0x69a>
				&& Received_Key  != 'X');

		HLCD_VoidClear();
    2bfa:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
		if(Received_Key  == 'P')
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ee 57       	subi	r30, 0x7E	; 126
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	80 35       	cpi	r24, 0x50	; 80
    2c08:	29 f4       	brne	.+10     	; 0x2c14 <main+0x6d8>
			{
				HLCD_VoidSendString("You can pass now");
    2c0a:	83 e9       	ldi	r24, 0x93	; 147
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    2c12:	0a c0       	rjmp	.+20     	; 0x2c28 <main+0x6ec>
			}
		else if(Received_Key == 'X')
    2c14:	fe 01       	movw	r30, r28
    2c16:	ee 57       	subi	r30, 0x7E	; 126
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	88 35       	cpi	r24, 0x58	; 88
    2c1e:	21 f4       	brne	.+8      	; 0x2c28 <main+0x6ec>
			{
				HLCD_VoidSendString("You can't pass");
    2c20:	84 ea       	ldi	r24, 0xA4	; 164
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ef 5a       	subi	r30, 0xAF	; 175
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	aa e7       	ldi	r26, 0x7A	; 122
    2c34:	b4 e4       	ldi	r27, 0x44	; 68
    2c36:	80 83       	st	Z, r24
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	a2 83       	std	Z+2, r26	; 0x02
    2c3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	8e 01       	movw	r16, r28
    2c40:	03 5b       	subi	r16, 0xB3	; 179
    2c42:	1f 4f       	sbci	r17, 0xFF	; 255
    2c44:	fe 01       	movw	r30, r28
    2c46:	ef 5a       	subi	r30, 0xAF	; 175
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	60 81       	ld	r22, Z
    2c4c:	71 81       	ldd	r23, Z+1	; 0x01
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	93 81       	ldd	r25, Z+3	; 0x03
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4a ef       	ldi	r20, 0xFA	; 250
    2c58:	54 e4       	ldi	r21, 0x44	; 68
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	f8 01       	movw	r30, r16
    2c64:	80 83       	st	Z, r24
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	a2 83       	std	Z+2, r26	; 0x02
    2c6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e3 5b       	subi	r30, 0xB3	; 179
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	60 81       	ld	r22, Z
    2c74:	71 81       	ldd	r23, Z+1	; 0x01
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	93 81       	ldd	r25, Z+3	; 0x03
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	44 f4       	brge	.+16     	; 0x2c9a <main+0x75e>
		__ticks = 1;
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e5 5b       	subi	r30, 0xB5	; 181
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
    2c98:	64 c0       	rjmp	.+200    	; 0x2d62 <main+0x826>
	else if (__tmp > 65535)
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e3 5b       	subi	r30, 0xB3	; 179
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	3f ef       	ldi	r19, 0xFF	; 255
    2cac:	4f e7       	ldi	r20, 0x7F	; 127
    2cae:	57 e4       	ldi	r21, 0x47	; 71
    2cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb4:	18 16       	cp	r1, r24
    2cb6:	0c f0       	brlt	.+2      	; 0x2cba <main+0x77e>
    2cb8:	43 c0       	rjmp	.+134    	; 0x2d40 <main+0x804>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cba:	fe 01       	movw	r30, r28
    2cbc:	ef 5a       	subi	r30, 0xAF	; 175
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	60 81       	ld	r22, Z
    2cc2:	71 81       	ldd	r23, Z+1	; 0x01
    2cc4:	82 81       	ldd	r24, Z+2	; 0x02
    2cc6:	93 81       	ldd	r25, Z+3	; 0x03
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e2       	ldi	r20, 0x20	; 32
    2cce:	51 e4       	ldi	r21, 0x41	; 65
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	8e 01       	movw	r16, r28
    2cda:	05 5b       	subi	r16, 0xB5	; 181
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	bc 01       	movw	r22, r24
    2ce0:	cd 01       	movw	r24, r26
    2ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	f8 01       	movw	r30, r16
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
    2cf0:	1f c0       	rjmp	.+62     	; 0x2d30 <main+0x7f4>
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e7 5b       	subi	r30, 0xB7	; 183
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	88 ec       	ldi	r24, 0xC8	; 200
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	80 83       	st	Z, r24
    2d00:	fe 01       	movw	r30, r28
    2d02:	e7 5b       	subi	r30, 0xB7	; 183
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <main+0x7ce>
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e7 5b       	subi	r30, 0xB7	; 183
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	91 83       	std	Z+1, r25	; 0x01
    2d16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d18:	de 01       	movw	r26, r28
    2d1a:	a5 5b       	subi	r26, 0xB5	; 181
    2d1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e5 5b       	subi	r30, 0xB5	; 181
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	80 81       	ld	r24, Z
    2d26:	91 81       	ldd	r25, Z+1	; 0x01
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	11 96       	adiw	r26, 0x01	; 1
    2d2c:	9c 93       	st	X, r25
    2d2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d30:	fe 01       	movw	r30, r28
    2d32:	e5 5b       	subi	r30, 0xB5	; 181
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	d1 f6       	brne	.-76     	; 0x2cf2 <main+0x7b6>
    2d3e:	27 c0       	rjmp	.+78     	; 0x2d8e <main+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d40:	8e 01       	movw	r16, r28
    2d42:	05 5b       	subi	r16, 0xB5	; 181
    2d44:	1f 4f       	sbci	r17, 0xFF	; 255
    2d46:	fe 01       	movw	r30, r28
    2d48:	e3 5b       	subi	r30, 0xB3	; 179
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	91 83       	std	Z+1, r25	; 0x01
    2d60:	80 83       	st	Z, r24
    2d62:	de 01       	movw	r26, r28
    2d64:	a9 5b       	subi	r26, 0xB9	; 185
    2d66:	bf 4f       	sbci	r27, 0xFF	; 255
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e5 5b       	subi	r30, 0xB5	; 181
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	8d 93       	st	X+, r24
    2d74:	9c 93       	st	X, r25
    2d76:	fe 01       	movw	r30, r28
    2d78:	e9 5b       	subi	r30, 0xB9	; 185
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <main+0x844>
    2d84:	fe 01       	movw	r30, r28
    2d86:	e9 5b       	subi	r30, 0xB9	; 185
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	80 83       	st	Z, r24
			}
		_delay_ms(1000);
		HLCD_VoidClear();
    2d8e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
    2d92:	e7 cb       	rjmp	.-2098   	; 0x2562 <main+0x26>


		break;

		case 3:
				HLCD_VoidClear();
    2d94:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
				HLCD_VoidSendString("Welcome");
    2d98:	80 e6       	ldi	r24, 0x60	; 96
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
				HLCD_VoidCursor(0,LINE1);
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	61 e0       	ldi	r22, 0x01	; 1
    2da4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
				HLCD_VoidSendString("Wael");
    2da8:	87 eb       	ldi	r24, 0xB7	; 183
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
				MUART_VoidTransmit('W');
    2db0:	87 e5       	ldi	r24, 0x57	; 87
    2db2:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
    2db6:	fe 01       	movw	r30, r28
    2db8:	ed 5b       	subi	r30, 0xBD	; 189
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	aa e7       	ldi	r26, 0x7A	; 122
    2dc2:	b4 e4       	ldi	r27, 0x44	; 68
    2dc4:	80 83       	st	Z, r24
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	a2 83       	std	Z+2, r26	; 0x02
    2dca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dcc:	8e 01       	movw	r16, r28
    2dce:	01 5c       	subi	r16, 0xC1	; 193
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	ed 5b       	subi	r30, 0xBD	; 189
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a ef       	ldi	r20, 0xFA	; 250
    2de6:	54 e4       	ldi	r21, 0x44	; 68
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	f8 01       	movw	r30, r16
    2df2:	80 83       	st	Z, r24
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	a2 83       	std	Z+2, r26	; 0x02
    2df8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ff 96       	adiw	r30, 0x3f	; 63
    2dfe:	60 81       	ld	r22, Z
    2e00:	71 81       	ldd	r23, Z+1	; 0x01
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e8       	ldi	r20, 0x80	; 128
    2e0c:	5f e3       	ldi	r21, 0x3F	; 63
    2e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e12:	88 23       	and	r24, r24
    2e14:	2c f4       	brge	.+10     	; 0x2e20 <main+0x8e4>
		__ticks = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9e af       	std	Y+62, r25	; 0x3e
    2e1c:	8d af       	std	Y+61, r24	; 0x3d
    2e1e:	46 c0       	rjmp	.+140    	; 0x2eac <main+0x970>
	else if (__tmp > 65535)
    2e20:	fe 01       	movw	r30, r28
    2e22:	ff 96       	adiw	r30, 0x3f	; 63
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	3f ef       	ldi	r19, 0xFF	; 255
    2e30:	4f e7       	ldi	r20, 0x7F	; 127
    2e32:	57 e4       	ldi	r21, 0x47	; 71
    2e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e38:	18 16       	cp	r1, r24
    2e3a:	64 f5       	brge	.+88     	; 0x2e94 <main+0x958>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	ed 5b       	subi	r30, 0xBD	; 189
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9e af       	std	Y+62, r25	; 0x3e
    2e68:	8d af       	std	Y+61, r24	; 0x3d
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <main+0x94e>
    2e6c:	88 ec       	ldi	r24, 0xC8	; 200
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9c af       	std	Y+60, r25	; 0x3c
    2e72:	8b af       	std	Y+59, r24	; 0x3b
    2e74:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e76:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <main+0x93c>
    2e7c:	9c af       	std	Y+60, r25	; 0x3c
    2e7e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	9e af       	std	Y+62, r25	; 0x3e
    2e88:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	69 f7       	brne	.-38     	; 0x2e6c <main+0x930>
    2e92:	16 c0       	rjmp	.+44     	; 0x2ec0 <main+0x984>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	fe 01       	movw	r30, r28
    2e96:	ff 96       	adiw	r30, 0x3f	; 63
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9e af       	std	Y+62, r25	; 0x3e
    2eaa:	8d af       	std	Y+61, r24	; 0x3d
    2eac:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eae:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb0:	9a af       	std	Y+58, r25	; 0x3a
    2eb2:	89 af       	std	Y+57, r24	; 0x39
    2eb4:	89 ad       	ldd	r24, Y+57	; 0x39
    2eb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <main+0x97c>
    2ebc:	9a af       	std	Y+58, r25	; 0x3a
    2ebe:	89 af       	std	Y+57, r24	; 0x39

				_delay_ms(1000);

				HLCD_VoidClear();
    2ec0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
				HLCD_VoidSendString("Please wait for");
    2ec4:	84 e7       	ldi	r24, 0x74	; 116
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
				HLCD_VoidCursor(0,LINE1);
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	61 e0       	ldi	r22, 0x01	; 1
    2ed0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
				HLCD_VoidSendString("admin approval");
    2ed4:	84 e8       	ldi	r24, 0x84	; 132
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>

				while ((Received_Key = MUART_u8Receive()) != 'P'
    2edc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ee 57       	subi	r30, 0x7E	; 126
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 83       	st	Z, r24
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ee 57       	subi	r30, 0x7E	; 126
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	80 35       	cpi	r24, 0x50	; 80
    2ef2:	31 f0       	breq	.+12     	; 0x2f00 <main+0x9c4>
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ee 57       	subi	r30, 0x7E	; 126
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	88 35       	cpi	r24, 0x58	; 88
    2efe:	71 f7       	brne	.-36     	; 0x2edc <main+0x9a0>
					 && Received_Key != 'X');

			HLCD_VoidClear();
    2f00:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
			if(Received_Key  == 'P')
    2f04:	fe 01       	movw	r30, r28
    2f06:	ee 57       	subi	r30, 0x7E	; 126
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 35       	cpi	r24, 0x50	; 80
    2f0e:	29 f4       	brne	.+10     	; 0x2f1a <main+0x9de>
				{
					HLCD_VoidSendString("You can pass now");
    2f10:	83 e9       	ldi	r24, 0x93	; 147
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    2f18:	0a c0       	rjmp	.+20     	; 0x2f2e <main+0x9f2>
				}
			else if(Received_Key == 'X')
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	ee 57       	subi	r30, 0x7E	; 126
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 81       	ld	r24, Z
    2f22:	88 35       	cpi	r24, 0x58	; 88
    2f24:	21 f4       	brne	.+8      	; 0x2f2e <main+0x9f2>
				{
					HLCD_VoidSendString("You can't pass");
    2f26:	84 ea       	ldi	r24, 0xA4	; 164
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	aa e7       	ldi	r26, 0x7A	; 122
    2f34:	b4 e4       	ldi	r27, 0x44	; 68
    2f36:	8d ab       	std	Y+53, r24	; 0x35
    2f38:	9e ab       	std	Y+54, r25	; 0x36
    2f3a:	af ab       	std	Y+55, r26	; 0x37
    2f3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f40:	7e a9       	ldd	r23, Y+54	; 0x36
    2f42:	8f a9       	ldd	r24, Y+55	; 0x37
    2f44:	98 ad       	ldd	r25, Y+56	; 0x38
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	4a ef       	ldi	r20, 0xFA	; 250
    2f4c:	54 e4       	ldi	r21, 0x44	; 68
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	89 ab       	std	Y+49, r24	; 0x31
    2f58:	9a ab       	std	Y+50, r25	; 0x32
    2f5a:	ab ab       	std	Y+51, r26	; 0x33
    2f5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f60:	7a a9       	ldd	r23, Y+50	; 0x32
    2f62:	8b a9       	ldd	r24, Y+51	; 0x33
    2f64:	9c a9       	ldd	r25, Y+52	; 0x34
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <main+0xa44>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	98 ab       	std	Y+48, r25	; 0x30
    2f7c:	8f a7       	std	Y+47, r24	; 0x2f
    2f7e:	3f c0       	rjmp	.+126    	; 0x2ffe <main+0xac2>
	else if (__tmp > 65535)
    2f80:	69 a9       	ldd	r22, Y+49	; 0x31
    2f82:	7a a9       	ldd	r23, Y+50	; 0x32
    2f84:	8b a9       	ldd	r24, Y+51	; 0x33
    2f86:	9c a9       	ldd	r25, Y+52	; 0x34
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	3f ef       	ldi	r19, 0xFF	; 255
    2f8c:	4f e7       	ldi	r20, 0x7F	; 127
    2f8e:	57 e4       	ldi	r21, 0x47	; 71
    2f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f94:	18 16       	cp	r1, r24
    2f96:	4c f5       	brge	.+82     	; 0x2fea <main+0xaae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	6d a9       	ldd	r22, Y+53	; 0x35
    2f9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	98 ab       	std	Y+48, r25	; 0x30
    2fbe:	8f a7       	std	Y+47, r24	; 0x2f
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <main+0xaa4>
    2fc2:	88 ec       	ldi	r24, 0xC8	; 200
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9e a7       	std	Y+46, r25	; 0x2e
    2fc8:	8d a7       	std	Y+45, r24	; 0x2d
    2fca:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fcc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <main+0xa92>
    2fd2:	9e a7       	std	Y+46, r25	; 0x2e
    2fd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	98 ab       	std	Y+48, r25	; 0x30
    2fde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <main+0xa86>
    2fe8:	14 c0       	rjmp	.+40     	; 0x3012 <main+0xad6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fea:	69 a9       	ldd	r22, Y+49	; 0x31
    2fec:	7a a9       	ldd	r23, Y+50	; 0x32
    2fee:	8b a9       	ldd	r24, Y+51	; 0x33
    2ff0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	98 ab       	std	Y+48, r25	; 0x30
    2ffc:	8f a7       	std	Y+47, r24	; 0x2f
    2ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3000:	98 a9       	ldd	r25, Y+48	; 0x30
    3002:	9c a7       	std	Y+44, r25	; 0x2c
    3004:	8b a7       	std	Y+43, r24	; 0x2b
    3006:	8b a5       	ldd	r24, Y+43	; 0x2b
    3008:	9c a5       	ldd	r25, Y+44	; 0x2c
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	f1 f7       	brne	.-4      	; 0x300a <main+0xace>
    300e:	9c a7       	std	Y+44, r25	; 0x2c
    3010:	8b a7       	std	Y+43, r24	; 0x2b
				}
			_delay_ms(1000);
			HLCD_VoidClear();
    3012:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
    3016:	a5 ca       	rjmp	.-2742   	; 0x2562 <main+0x26>
			break;


		default:

			HLCD_VoidClear();
    3018:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
			HLCD_VoidCursor(0,LINE0);
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	60 e0       	ldi	r22, 0x00	; 0
    3020:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
			HLCD_VoidSendString("Access denied");
    3024:	8c eb       	ldi	r24, 0xBC	; 188
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	61 e0       	ldi	r22, 0x01	; 1
    3030:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
			HLCD_VoidSendString("Wait for admin");
    3034:	8a ec       	ldi	r24, 0xCA	; 202
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			MUART_VoidTransmit('D');
    303c:	84 e4       	ldi	r24, 0x44	; 68
    303e:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
			while ((Received_Key = MUART_u8Receive()) != 'A'
    3042:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
    3046:	fe 01       	movw	r30, r28
    3048:	ee 57       	subi	r30, 0x7E	; 126
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	80 83       	st	Z, r24
    304e:	fe 01       	movw	r30, r28
    3050:	ee 57       	subi	r30, 0x7E	; 126
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	80 81       	ld	r24, Z
    3056:	81 34       	cpi	r24, 0x41	; 65
    3058:	31 f0       	breq	.+12     	; 0x3066 <main+0xb2a>
    305a:	fe 01       	movw	r30, r28
    305c:	ee 57       	subi	r30, 0x7E	; 126
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	88 35       	cpi	r24, 0x58	; 88
    3064:	71 f7       	brne	.-36     	; 0x3042 <main+0xb06>
				 && Received_Key != 'X');

			if( Received_Key == 'A' )
    3066:	fe 01       	movw	r30, r28
    3068:	ee 57       	subi	r30, 0x7E	; 126
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	80 81       	ld	r24, Z
    306e:	81 34       	cpi	r24, 0x41	; 65
    3070:	09 f0       	breq	.+2      	; 0x3074 <main+0xb38>
    3072:	fb c0       	rjmp	.+502    	; 0x326a <main+0xd2e>
			{
			HLCD_VoidClear();
    3074:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
			HLCD_VoidSendString("Access allowed");
    3078:	89 ed       	ldi	r24, 0xD9	; 217
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	aa e7       	ldi	r26, 0x7A	; 122
    3086:	b4 e4       	ldi	r27, 0x44	; 68
    3088:	8f a3       	std	Y+39, r24	; 0x27
    308a:	98 a7       	std	Y+40, r25	; 0x28
    308c:	a9 a7       	std	Y+41, r26	; 0x29
    308e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3090:	6f a1       	ldd	r22, Y+39	; 0x27
    3092:	78 a5       	ldd	r23, Y+40	; 0x28
    3094:	89 a5       	ldd	r24, Y+41	; 0x29
    3096:	9a a5       	ldd	r25, Y+42	; 0x2a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4a ef       	ldi	r20, 0xFA	; 250
    309e:	54 e4       	ldi	r21, 0x44	; 68
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	8b a3       	std	Y+35, r24	; 0x23
    30aa:	9c a3       	std	Y+36, r25	; 0x24
    30ac:	ad a3       	std	Y+37, r26	; 0x25
    30ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30b0:	6b a1       	ldd	r22, Y+35	; 0x23
    30b2:	7c a1       	ldd	r23, Y+36	; 0x24
    30b4:	8d a1       	ldd	r24, Y+37	; 0x25
    30b6:	9e a1       	ldd	r25, Y+38	; 0x26
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e8       	ldi	r20, 0x80	; 128
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c4:	88 23       	and	r24, r24
    30c6:	2c f4       	brge	.+10     	; 0x30d2 <main+0xb96>
		__ticks = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	9a a3       	std	Y+34, r25	; 0x22
    30ce:	89 a3       	std	Y+33, r24	; 0x21
    30d0:	3f c0       	rjmp	.+126    	; 0x3150 <main+0xc14>
	else if (__tmp > 65535)
    30d2:	6b a1       	ldd	r22, Y+35	; 0x23
    30d4:	7c a1       	ldd	r23, Y+36	; 0x24
    30d6:	8d a1       	ldd	r24, Y+37	; 0x25
    30d8:	9e a1       	ldd	r25, Y+38	; 0x26
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	3f ef       	ldi	r19, 0xFF	; 255
    30de:	4f e7       	ldi	r20, 0x7F	; 127
    30e0:	57 e4       	ldi	r21, 0x47	; 71
    30e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e6:	18 16       	cp	r1, r24
    30e8:	4c f5       	brge	.+82     	; 0x313c <main+0xc00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ea:	6f a1       	ldd	r22, Y+39	; 0x27
    30ec:	78 a5       	ldd	r23, Y+40	; 0x28
    30ee:	89 a5       	ldd	r24, Y+41	; 0x29
    30f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e2       	ldi	r20, 0x20	; 32
    30f8:	51 e4       	ldi	r21, 0x41	; 65
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9a a3       	std	Y+34, r25	; 0x22
    3110:	89 a3       	std	Y+33, r24	; 0x21
    3112:	0f c0       	rjmp	.+30     	; 0x3132 <main+0xbf6>
    3114:	88 ec       	ldi	r24, 0xC8	; 200
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	98 a3       	std	Y+32, r25	; 0x20
    311a:	8f 8f       	std	Y+31, r24	; 0x1f
    311c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    311e:	98 a1       	ldd	r25, Y+32	; 0x20
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <main+0xbe4>
    3124:	98 a3       	std	Y+32, r25	; 0x20
    3126:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	89 a1       	ldd	r24, Y+33	; 0x21
    312a:	9a a1       	ldd	r25, Y+34	; 0x22
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	9a a3       	std	Y+34, r25	; 0x22
    3130:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	89 a1       	ldd	r24, Y+33	; 0x21
    3134:	9a a1       	ldd	r25, Y+34	; 0x22
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	69 f7       	brne	.-38     	; 0x3114 <main+0xbd8>
    313a:	14 c0       	rjmp	.+40     	; 0x3164 <main+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313c:	6b a1       	ldd	r22, Y+35	; 0x23
    313e:	7c a1       	ldd	r23, Y+36	; 0x24
    3140:	8d a1       	ldd	r24, Y+37	; 0x25
    3142:	9e a1       	ldd	r25, Y+38	; 0x26
    3144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9a a3       	std	Y+34, r25	; 0x22
    314e:	89 a3       	std	Y+33, r24	; 0x21
    3150:	89 a1       	ldd	r24, Y+33	; 0x21
    3152:	9a a1       	ldd	r25, Y+34	; 0x22
    3154:	9e 8f       	std	Y+30, r25	; 0x1e
    3156:	8d 8f       	std	Y+29, r24	; 0x1d
    3158:	8d 8d       	ldd	r24, Y+29	; 0x1d
    315a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <main+0xc20>
    3160:	9e 8f       	std	Y+30, r25	; 0x1e
    3162:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			HLCD_VoidClear();
    3164:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>

			HLCD_VoidSendString("Re-enter your");
    3168:	88 ee       	ldi	r24, 0xE8	; 232
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	61 e0       	ldi	r22, 0x01	; 1
    3174:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
			HLCD_VoidSendString("ID and Password");
    3178:	86 ef       	ldi	r24, 0xF6	; 246
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	aa e7       	ldi	r26, 0x7A	; 122
    3186:	b4 e4       	ldi	r27, 0x44	; 68
    3188:	89 8f       	std	Y+25, r24	; 0x19
    318a:	9a 8f       	std	Y+26, r25	; 0x1a
    318c:	ab 8f       	std	Y+27, r26	; 0x1b
    318e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3190:	69 8d       	ldd	r22, Y+25	; 0x19
    3192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	4a ef       	ldi	r20, 0xFA	; 250
    319e:	54 e4       	ldi	r21, 0x44	; 68
    31a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	8d 8b       	std	Y+21, r24	; 0x15
    31aa:	9e 8b       	std	Y+22, r25	; 0x16
    31ac:	af 8b       	std	Y+23, r26	; 0x17
    31ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31b0:	6d 89       	ldd	r22, Y+21	; 0x15
    31b2:	7e 89       	ldd	r23, Y+22	; 0x16
    31b4:	8f 89       	ldd	r24, Y+23	; 0x17
    31b6:	98 8d       	ldd	r25, Y+24	; 0x18
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e8       	ldi	r20, 0x80	; 128
    31be:	5f e3       	ldi	r21, 0x3F	; 63
    31c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c4:	88 23       	and	r24, r24
    31c6:	2c f4       	brge	.+10     	; 0x31d2 <main+0xc96>
		__ticks = 1;
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	9c 8b       	std	Y+20, r25	; 0x14
    31ce:	8b 8b       	std	Y+19, r24	; 0x13
    31d0:	3f c0       	rjmp	.+126    	; 0x3250 <main+0xd14>
	else if (__tmp > 65535)
    31d2:	6d 89       	ldd	r22, Y+21	; 0x15
    31d4:	7e 89       	ldd	r23, Y+22	; 0x16
    31d6:	8f 89       	ldd	r24, Y+23	; 0x17
    31d8:	98 8d       	ldd	r25, Y+24	; 0x18
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	3f ef       	ldi	r19, 0xFF	; 255
    31de:	4f e7       	ldi	r20, 0x7F	; 127
    31e0:	57 e4       	ldi	r21, 0x47	; 71
    31e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e6:	18 16       	cp	r1, r24
    31e8:	4c f5       	brge	.+82     	; 0x323c <main+0xd00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ea:	69 8d       	ldd	r22, Y+25	; 0x19
    31ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	40 e2       	ldi	r20, 0x20	; 32
    31f8:	51 e4       	ldi	r21, 0x41	; 65
    31fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	bc 01       	movw	r22, r24
    3204:	cd 01       	movw	r24, r26
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	9c 8b       	std	Y+20, r25	; 0x14
    3210:	8b 8b       	std	Y+19, r24	; 0x13
    3212:	0f c0       	rjmp	.+30     	; 0x3232 <main+0xcf6>
    3214:	88 ec       	ldi	r24, 0xC8	; 200
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	9a 8b       	std	Y+18, r25	; 0x12
    321a:	89 8b       	std	Y+17, r24	; 0x11
    321c:	89 89       	ldd	r24, Y+17	; 0x11
    321e:	9a 89       	ldd	r25, Y+18	; 0x12
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <main+0xce4>
    3224:	9a 8b       	std	Y+18, r25	; 0x12
    3226:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3228:	8b 89       	ldd	r24, Y+19	; 0x13
    322a:	9c 89       	ldd	r25, Y+20	; 0x14
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	9c 8b       	std	Y+20, r25	; 0x14
    3230:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	9c 89       	ldd	r25, Y+20	; 0x14
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	69 f7       	brne	.-38     	; 0x3214 <main+0xcd8>
    323a:	14 c0       	rjmp	.+40     	; 0x3264 <main+0xd28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323c:	6d 89       	ldd	r22, Y+21	; 0x15
    323e:	7e 89       	ldd	r23, Y+22	; 0x16
    3240:	8f 89       	ldd	r24, Y+23	; 0x17
    3242:	98 8d       	ldd	r25, Y+24	; 0x18
    3244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	9c 8b       	std	Y+20, r25	; 0x14
    324e:	8b 8b       	std	Y+19, r24	; 0x13
    3250:	8b 89       	ldd	r24, Y+19	; 0x13
    3252:	9c 89       	ldd	r25, Y+20	; 0x14
    3254:	98 8b       	std	Y+16, r25	; 0x10
    3256:	8f 87       	std	Y+15, r24	; 0x0f
    3258:	8f 85       	ldd	r24, Y+15	; 0x0f
    325a:	98 89       	ldd	r25, Y+16	; 0x10
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <main+0xd20>
    3260:	98 8b       	std	Y+16, r25	; 0x10
    3262:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1000);
			HLCD_VoidClear();
    3264:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
    3268:	7c c9       	rjmp	.-3336   	; 0x2562 <main+0x26>
			}
			else if( Received_Key == 'X' )
    326a:	fe 01       	movw	r30, r28
    326c:	ee 57       	subi	r30, 0x7E	; 126
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	88 35       	cpi	r24, 0x58	; 88
    3274:	09 f0       	breq	.+2      	; 0x3278 <main+0xd3c>
    3276:	75 c9       	rjmp	.-3350   	; 0x2562 <main+0x26>
			{
			HLCD_VoidClear();
    3278:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
				HLCD_VoidSendString("You can't pass");
    327c:	84 ea       	ldi	r24, 0xA4	; 164
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e8       	ldi	r25, 0x80	; 128
    3288:	ab eb       	ldi	r26, 0xBB	; 187
    328a:	b4 e4       	ldi	r27, 0x44	; 68
    328c:	8b 87       	std	Y+11, r24	; 0x0b
    328e:	9c 87       	std	Y+12, r25	; 0x0c
    3290:	ad 87       	std	Y+13, r26	; 0x0d
    3292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	6b 85       	ldd	r22, Y+11	; 0x0b
    3296:	7c 85       	ldd	r23, Y+12	; 0x0c
    3298:	8d 85       	ldd	r24, Y+13	; 0x0d
    329a:	9e 85       	ldd	r25, Y+14	; 0x0e
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	4a ef       	ldi	r20, 0xFA	; 250
    32a2:	54 e4       	ldi	r21, 0x44	; 68
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	8f 83       	std	Y+7, r24	; 0x07
    32ae:	98 87       	std	Y+8, r25	; 0x08
    32b0:	a9 87       	std	Y+9, r26	; 0x09
    32b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b4:	6f 81       	ldd	r22, Y+7	; 0x07
    32b6:	78 85       	ldd	r23, Y+8	; 0x08
    32b8:	89 85       	ldd	r24, Y+9	; 0x09
    32ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	2c f4       	brge	.+10     	; 0x32d6 <main+0xd9a>
		__ticks = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9e 83       	std	Y+6, r25	; 0x06
    32d2:	8d 83       	std	Y+5, r24	; 0x05
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <main+0xe18>
	else if (__tmp > 65535)
    32d6:	6f 81       	ldd	r22, Y+7	; 0x07
    32d8:	78 85       	ldd	r23, Y+8	; 0x08
    32da:	89 85       	ldd	r24, Y+9	; 0x09
    32dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	4f e7       	ldi	r20, 0x7F	; 127
    32e4:	57 e4       	ldi	r21, 0x47	; 71
    32e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	4c f5       	brge	.+82     	; 0x3340 <main+0xe04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9e 83       	std	Y+6, r25	; 0x06
    3314:	8d 83       	std	Y+5, r24	; 0x05
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <main+0xdfa>
    3318:	88 ec       	ldi	r24, 0xC8	; 200
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9c 83       	std	Y+4, r25	; 0x04
    331e:	8b 83       	std	Y+3, r24	; 0x03
    3320:	8b 81       	ldd	r24, Y+3	; 0x03
    3322:	9c 81       	ldd	r25, Y+4	; 0x04
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <main+0xde8>
    3328:	9c 83       	std	Y+4, r25	; 0x04
    332a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	8d 81       	ldd	r24, Y+5	; 0x05
    332e:	9e 81       	ldd	r25, Y+6	; 0x06
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3336:	8d 81       	ldd	r24, Y+5	; 0x05
    3338:	9e 81       	ldd	r25, Y+6	; 0x06
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	69 f7       	brne	.-38     	; 0x3318 <main+0xddc>
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <main+0xe2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	6f 81       	ldd	r22, Y+7	; 0x07
    3342:	78 85       	ldd	r23, Y+8	; 0x08
    3344:	89 85       	ldd	r24, Y+9	; 0x09
    3346:	9a 85       	ldd	r25, Y+10	; 0x0a
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9e 83       	std	Y+6, r25	; 0x06
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	8d 81       	ldd	r24, Y+5	; 0x05
    3356:	9e 81       	ldd	r25, Y+6	; 0x06
    3358:	9a 83       	std	Y+2, r25	; 0x02
    335a:	89 83       	std	Y+1, r24	; 0x01
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	9a 81       	ldd	r25, Y+2	; 0x02
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <main+0xe24>
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(1500);
			HLCD_VoidClear();
    3368:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
    336c:	fa c8       	rjmp	.-3596   	; 0x2562 <main+0x26>

0000336e <GetNumber>:
}



u16 GetNumber()
{
    336e:	df 93       	push	r29
    3370:	cf 93       	push	r28
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	61 97       	sbiw	r28, 0x11	; 17
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
	u16 L_Number=0;
    3382:	19 8a       	std	Y+17, r1	; 0x11
    3384:	18 8a       	std	Y+16, r1	; 0x10
	u8 L_PressedKey=0;
    3386:	1f 86       	std	Y+15, r1	; 0x0f

	L_PressedKey=HKPD_u8GetPressedKey();
    3388:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    338c:	8f 87       	std	Y+15, r24	; 0x0f
    338e:	03 c0       	rjmp	.+6      	; 0x3396 <GetNumber+0x28>
	while(L_PressedKey == '*' || L_PressedKey == '#' )
	{
		L_PressedKey=HKPD_u8GetPressedKey();
    3390:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    3394:	8f 87       	std	Y+15, r24	; 0x0f
{
	u16 L_Number=0;
	u8 L_PressedKey=0;

	L_PressedKey=HKPD_u8GetPressedKey();
	while(L_PressedKey == '*' || L_PressedKey == '#' )
    3396:	8f 85       	ldd	r24, Y+15	; 0x0f
    3398:	8a 32       	cpi	r24, 0x2A	; 42
    339a:	d1 f3       	breq	.-12     	; 0x3390 <GetNumber+0x22>
    339c:	8f 85       	ldd	r24, Y+15	; 0x0f
    339e:	83 32       	cpi	r24, 0x23	; 35
    33a0:	b9 f3       	breq	.-18     	; 0x3390 <GetNumber+0x22>
	{
		L_PressedKey=HKPD_u8GetPressedKey();
	}
	HLCD_VoidSendData(L_PressedKey);
    33a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a4:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
	L_Number = (L_PressedKey-'0')*1000;
    33a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33aa:	88 2f       	mov	r24, r24
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	9c 01       	movw	r18, r24
    33b0:	20 53       	subi	r18, 0x30	; 48
    33b2:	30 40       	sbci	r19, 0x00	; 0
    33b4:	88 ee       	ldi	r24, 0xE8	; 232
    33b6:	93 e0       	ldi	r25, 0x03	; 3
    33b8:	ac 01       	movw	r20, r24
    33ba:	24 9f       	mul	r18, r20
    33bc:	c0 01       	movw	r24, r0
    33be:	25 9f       	mul	r18, r21
    33c0:	90 0d       	add	r25, r0
    33c2:	34 9f       	mul	r19, r20
    33c4:	90 0d       	add	r25, r0
    33c6:	11 24       	eor	r1, r1
    33c8:	99 8b       	std	Y+17, r25	; 0x11
    33ca:	88 8b       	std	Y+16, r24	; 0x10


	L_PressedKey=HKPD_u8GetPressedKey();
    33cc:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    33d0:	8f 87       	std	Y+15, r24	; 0x0f
    33d2:	03 c0       	rjmp	.+6      	; 0x33da <GetNumber+0x6c>
	while(L_PressedKey == '*' || L_PressedKey == '#' )
	{
		L_PressedKey=HKPD_u8GetPressedKey();
    33d4:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    33d8:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_VoidSendData(L_PressedKey);
	L_Number = (L_PressedKey-'0')*1000;


	L_PressedKey=HKPD_u8GetPressedKey();
	while(L_PressedKey == '*' || L_PressedKey == '#' )
    33da:	8f 85       	ldd	r24, Y+15	; 0x0f
    33dc:	8a 32       	cpi	r24, 0x2A	; 42
    33de:	d1 f3       	breq	.-12     	; 0x33d4 <GetNumber+0x66>
    33e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e2:	83 32       	cpi	r24, 0x23	; 35
    33e4:	b9 f3       	breq	.-18     	; 0x33d4 <GetNumber+0x66>
	{
		L_PressedKey=HKPD_u8GetPressedKey();
	}
	HLCD_VoidSendData(L_PressedKey);
    33e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
	L_Number += ((L_PressedKey-'0')*100);
    33ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	84 e6       	ldi	r24, 0x64	; 100
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	ac 01       	movw	r20, r24
    33f8:	24 9f       	mul	r18, r20
    33fa:	c0 01       	movw	r24, r0
    33fc:	25 9f       	mul	r18, r21
    33fe:	90 0d       	add	r25, r0
    3400:	34 9f       	mul	r19, r20
    3402:	90 0d       	add	r25, r0
    3404:	11 24       	eor	r1, r1
    3406:	9c 01       	movw	r18, r24
    3408:	88 89       	ldd	r24, Y+16	; 0x10
    340a:	99 89       	ldd	r25, Y+17	; 0x11
    340c:	82 0f       	add	r24, r18
    340e:	93 1f       	adc	r25, r19
    3410:	80 5c       	subi	r24, 0xC0	; 192
    3412:	92 41       	sbci	r25, 0x12	; 18
    3414:	99 8b       	std	Y+17, r25	; 0x11
    3416:	88 8b       	std	Y+16, r24	; 0x10

	L_PressedKey=HKPD_u8GetPressedKey();
    3418:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    341c:	8f 87       	std	Y+15, r24	; 0x0f
    341e:	03 c0       	rjmp	.+6      	; 0x3426 <GetNumber+0xb8>
	while(L_PressedKey == '*' || L_PressedKey == '#' )
	{
		L_PressedKey=HKPD_u8GetPressedKey();
    3420:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    3424:	8f 87       	std	Y+15, r24	; 0x0f
	}
	HLCD_VoidSendData(L_PressedKey);
	L_Number += ((L_PressedKey-'0')*100);

	L_PressedKey=HKPD_u8GetPressedKey();
	while(L_PressedKey == '*' || L_PressedKey == '#' )
    3426:	8f 85       	ldd	r24, Y+15	; 0x0f
    3428:	8a 32       	cpi	r24, 0x2A	; 42
    342a:	d1 f3       	breq	.-12     	; 0x3420 <GetNumber+0xb2>
    342c:	8f 85       	ldd	r24, Y+15	; 0x0f
    342e:	83 32       	cpi	r24, 0x23	; 35
    3430:	b9 f3       	breq	.-18     	; 0x3420 <GetNumber+0xb2>
	{
		L_PressedKey=HKPD_u8GetPressedKey();
	}
	HLCD_VoidSendData(L_PressedKey);
    3432:	8f 85       	ldd	r24, Y+15	; 0x0f
    3434:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
	L_Number += ((L_PressedKey-'0')*10);
    3438:	8f 85       	ldd	r24, Y+15	; 0x0f
    343a:	88 2f       	mov	r24, r24
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9c 01       	movw	r18, r24
    3440:	22 0f       	add	r18, r18
    3442:	33 1f       	adc	r19, r19
    3444:	c9 01       	movw	r24, r18
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	82 0f       	add	r24, r18
    3450:	93 1f       	adc	r25, r19
    3452:	9c 01       	movw	r18, r24
    3454:	88 89       	ldd	r24, Y+16	; 0x10
    3456:	99 89       	ldd	r25, Y+17	; 0x11
    3458:	82 0f       	add	r24, r18
    345a:	93 1f       	adc	r25, r19
    345c:	80 5e       	subi	r24, 0xE0	; 224
    345e:	91 40       	sbci	r25, 0x01	; 1
    3460:	99 8b       	std	Y+17, r25	; 0x11
    3462:	88 8b       	std	Y+16, r24	; 0x10


	L_PressedKey=HKPD_u8GetPressedKey();
    3464:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    3468:	8f 87       	std	Y+15, r24	; 0x0f
    346a:	03 c0       	rjmp	.+6      	; 0x3472 <GetNumber+0x104>
	while(L_PressedKey == '*' || L_PressedKey == '#' )
	{
		L_PressedKey=HKPD_u8GetPressedKey();
    346c:	0e 94 cc 11 	call	0x2398	; 0x2398 <HKPD_u8GetPressedKey>
    3470:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_VoidSendData(L_PressedKey);
	L_Number += ((L_PressedKey-'0')*10);


	L_PressedKey=HKPD_u8GetPressedKey();
	while(L_PressedKey == '*' || L_PressedKey == '#' )
    3472:	8f 85       	ldd	r24, Y+15	; 0x0f
    3474:	8a 32       	cpi	r24, 0x2A	; 42
    3476:	d1 f3       	breq	.-12     	; 0x346c <GetNumber+0xfe>
    3478:	8f 85       	ldd	r24, Y+15	; 0x0f
    347a:	83 32       	cpi	r24, 0x23	; 35
    347c:	b9 f3       	breq	.-18     	; 0x346c <GetNumber+0xfe>
	{
		L_PressedKey=HKPD_u8GetPressedKey();
	}
	HLCD_VoidSendData(L_PressedKey);
    347e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3480:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <HLCD_VoidSendData>
	L_Number += (L_PressedKey-'0');
    3484:	8f 85       	ldd	r24, Y+15	; 0x0f
    3486:	28 2f       	mov	r18, r24
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	88 89       	ldd	r24, Y+16	; 0x10
    348c:	99 89       	ldd	r25, Y+17	; 0x11
    348e:	82 0f       	add	r24, r18
    3490:	93 1f       	adc	r25, r19
    3492:	c0 97       	sbiw	r24, 0x30	; 48
    3494:	99 8b       	std	Y+17, r25	; 0x11
    3496:	88 8b       	std	Y+16, r24	; 0x10
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	aa ef       	ldi	r26, 0xFA	; 250
    349e:	b3 e4       	ldi	r27, 0x43	; 67
    34a0:	8b 87       	std	Y+11, r24	; 0x0b
    34a2:	9c 87       	std	Y+12, r25	; 0x0c
    34a4:	ad 87       	std	Y+13, r26	; 0x0d
    34a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	4a ef       	ldi	r20, 0xFA	; 250
    34b6:	54 e4       	ldi	r21, 0x44	; 68
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8f 83       	std	Y+7, r24	; 0x07
    34c2:	98 87       	std	Y+8, r25	; 0x08
    34c4:	a9 87       	std	Y+9, r26	; 0x09
    34c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34c8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ca:	78 85       	ldd	r23, Y+8	; 0x08
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e8       	ldi	r20, 0x80	; 128
    34d6:	5f e3       	ldi	r21, 0x3F	; 63
    34d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34dc:	88 23       	and	r24, r24
    34de:	2c f4       	brge	.+10     	; 0x34ea <GetNumber+0x17c>
		__ticks = 1;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9e 83       	std	Y+6, r25	; 0x06
    34e6:	8d 83       	std	Y+5, r24	; 0x05
    34e8:	3f c0       	rjmp	.+126    	; 0x3568 <GetNumber+0x1fa>
	else if (__tmp > 65535)
    34ea:	6f 81       	ldd	r22, Y+7	; 0x07
    34ec:	78 85       	ldd	r23, Y+8	; 0x08
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	3f ef       	ldi	r19, 0xFF	; 255
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	57 e4       	ldi	r21, 0x47	; 71
    34fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	4c f5       	brge	.+82     	; 0x3554 <GetNumber+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3502:	6b 85       	ldd	r22, Y+11	; 0x0b
    3504:	7c 85       	ldd	r23, Y+12	; 0x0c
    3506:	8d 85       	ldd	r24, Y+13	; 0x0d
    3508:	9e 85       	ldd	r25, Y+14	; 0x0e
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e2       	ldi	r20, 0x20	; 32
    3510:	51 e4       	ldi	r21, 0x41	; 65
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	bc 01       	movw	r22, r24
    351c:	cd 01       	movw	r24, r26
    351e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	9e 83       	std	Y+6, r25	; 0x06
    3528:	8d 83       	std	Y+5, r24	; 0x05
    352a:	0f c0       	rjmp	.+30     	; 0x354a <GetNumber+0x1dc>
    352c:	88 ec       	ldi	r24, 0xC8	; 200
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	9c 83       	std	Y+4, r25	; 0x04
    3532:	8b 83       	std	Y+3, r24	; 0x03
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	9c 81       	ldd	r25, Y+4	; 0x04
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	f1 f7       	brne	.-4      	; 0x3538 <GetNumber+0x1ca>
    353c:	9c 83       	std	Y+4, r25	; 0x04
    353e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	9e 81       	ldd	r25, Y+6	; 0x06
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	69 f7       	brne	.-38     	; 0x352c <GetNumber+0x1be>
    3552:	14 c0       	rjmp	.+40     	; 0x357c <GetNumber+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3554:	6f 81       	ldd	r22, Y+7	; 0x07
    3556:	78 85       	ldd	r23, Y+8	; 0x08
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	9a 83       	std	Y+2, r25	; 0x02
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <GetNumber+0x206>
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	return L_Number;
    357c:	88 89       	ldd	r24, Y+16	; 0x10
    357e:	99 89       	ldd	r25, Y+17	; 0x11
}
    3580:	61 96       	adiw	r28, 0x11	; 17
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	08 95       	ret

00003592 <CheckID>:

u8 CheckID()
{
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	a5 97       	sbiw	r28, 0x25	; 37
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
	u16 L_ID, id1=1234, id2=5678, id3=7891;
    35a6:	82 ed       	ldi	r24, 0xD2	; 210
    35a8:	94 e0       	ldi	r25, 0x04	; 4
    35aa:	9a a3       	std	Y+34, r25	; 0x22
    35ac:	89 a3       	std	Y+33, r24	; 0x21
    35ae:	8e e2       	ldi	r24, 0x2E	; 46
    35b0:	96 e1       	ldi	r25, 0x16	; 22
    35b2:	98 a3       	std	Y+32, r25	; 0x20
    35b4:	8f 8f       	std	Y+31, r24	; 0x1f
    35b6:	83 ed       	ldi	r24, 0xD3	; 211
    35b8:	9e e1       	ldi	r25, 0x1E	; 30
    35ba:	9e 8f       	std	Y+30, r25	; 0x1e
    35bc:	8d 8f       	std	Y+29, r24	; 0x1d

	HLCD_VoidClear();
    35be:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
	HLCD_VoidSendString("Please enter ID:");
    35c2:	86 e0       	ldi	r24, 0x06	; 6
    35c4:	91 e0       	ldi	r25, 0x01	; 1
    35c6:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
	HLCD_VoidCursor(0,LINE1);
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	61 e0       	ldi	r22, 0x01	; 1
    35ce:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
	L_ID=GetNumber();
    35d2:	0e 94 b7 19 	call	0x336e	; 0x336e <GetNumber>
    35d6:	9c a3       	std	Y+36, r25	; 0x24
    35d8:	8b a3       	std	Y+35, r24	; 0x23

	if		( L_ID==id1 )	{	return 1;	}
    35da:	2b a1       	ldd	r18, Y+35	; 0x23
    35dc:	3c a1       	ldd	r19, Y+36	; 0x24
    35de:	89 a1       	ldd	r24, Y+33	; 0x21
    35e0:	9a a1       	ldd	r25, Y+34	; 0x22
    35e2:	28 17       	cp	r18, r24
    35e4:	39 07       	cpc	r19, r25
    35e6:	19 f4       	brne	.+6      	; 0x35ee <CheckID+0x5c>
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	8d a3       	std	Y+37, r24	; 0x25
    35ec:	00 c1       	rjmp	.+512    	; 0x37ee <CheckID+0x25c>
	else if	( L_ID==id2 )	{	return 2;	}
    35ee:	2b a1       	ldd	r18, Y+35	; 0x23
    35f0:	3c a1       	ldd	r19, Y+36	; 0x24
    35f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35f4:	98 a1       	ldd	r25, Y+32	; 0x20
    35f6:	28 17       	cp	r18, r24
    35f8:	39 07       	cpc	r19, r25
    35fa:	19 f4       	brne	.+6      	; 0x3602 <CheckID+0x70>
    35fc:	82 e0       	ldi	r24, 0x02	; 2
    35fe:	8d a3       	std	Y+37, r24	; 0x25
    3600:	f6 c0       	rjmp	.+492    	; 0x37ee <CheckID+0x25c>
	else if ( L_ID==id3 )	{	return 3;	}
    3602:	2b a1       	ldd	r18, Y+35	; 0x23
    3604:	3c a1       	ldd	r19, Y+36	; 0x24
    3606:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3608:	9e 8d       	ldd	r25, Y+30	; 0x1e
    360a:	28 17       	cp	r18, r24
    360c:	39 07       	cpc	r19, r25
    360e:	19 f4       	brne	.+6      	; 0x3616 <CheckID+0x84>
    3610:	83 e0       	ldi	r24, 0x03	; 3
    3612:	8d a3       	std	Y+37, r24	; 0x25
    3614:	ec c0       	rjmp	.+472    	; 0x37ee <CheckID+0x25c>
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	aa ef       	ldi	r26, 0xFA	; 250
    361c:	b3 e4       	ldi	r27, 0x43	; 67
    361e:	89 8f       	std	Y+25, r24	; 0x19
    3620:	9a 8f       	std	Y+26, r25	; 0x1a
    3622:	ab 8f       	std	Y+27, r26	; 0x1b
    3624:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3626:	69 8d       	ldd	r22, Y+25	; 0x19
    3628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    362a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    362c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	4a ef       	ldi	r20, 0xFA	; 250
    3634:	54 e4       	ldi	r21, 0x44	; 68
    3636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	8d 8b       	std	Y+21, r24	; 0x15
    3640:	9e 8b       	std	Y+22, r25	; 0x16
    3642:	af 8b       	std	Y+23, r26	; 0x17
    3644:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3646:	6d 89       	ldd	r22, Y+21	; 0x15
    3648:	7e 89       	ldd	r23, Y+22	; 0x16
    364a:	8f 89       	ldd	r24, Y+23	; 0x17
    364c:	98 8d       	ldd	r25, Y+24	; 0x18
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e8       	ldi	r20, 0x80	; 128
    3654:	5f e3       	ldi	r21, 0x3F	; 63
    3656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    365a:	88 23       	and	r24, r24
    365c:	2c f4       	brge	.+10     	; 0x3668 <CheckID+0xd6>
		__ticks = 1;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	9c 8b       	std	Y+20, r25	; 0x14
    3664:	8b 8b       	std	Y+19, r24	; 0x13
    3666:	3f c0       	rjmp	.+126    	; 0x36e6 <CheckID+0x154>
	else if (__tmp > 65535)
    3668:	6d 89       	ldd	r22, Y+21	; 0x15
    366a:	7e 89       	ldd	r23, Y+22	; 0x16
    366c:	8f 89       	ldd	r24, Y+23	; 0x17
    366e:	98 8d       	ldd	r25, Y+24	; 0x18
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	3f ef       	ldi	r19, 0xFF	; 255
    3674:	4f e7       	ldi	r20, 0x7F	; 127
    3676:	57 e4       	ldi	r21, 0x47	; 71
    3678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    367c:	18 16       	cp	r1, r24
    367e:	4c f5       	brge	.+82     	; 0x36d2 <CheckID+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3680:	69 8d       	ldd	r22, Y+25	; 0x19
    3682:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3686:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e2       	ldi	r20, 0x20	; 32
    368e:	51 e4       	ldi	r21, 0x41	; 65
    3690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	bc 01       	movw	r22, r24
    369a:	cd 01       	movw	r24, r26
    369c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	9c 8b       	std	Y+20, r25	; 0x14
    36a6:	8b 8b       	std	Y+19, r24	; 0x13
    36a8:	0f c0       	rjmp	.+30     	; 0x36c8 <CheckID+0x136>
    36aa:	88 ec       	ldi	r24, 0xC8	; 200
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	9a 8b       	std	Y+18, r25	; 0x12
    36b0:	89 8b       	std	Y+17, r24	; 0x11
    36b2:	89 89       	ldd	r24, Y+17	; 0x11
    36b4:	9a 89       	ldd	r25, Y+18	; 0x12
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <CheckID+0x124>
    36ba:	9a 8b       	std	Y+18, r25	; 0x12
    36bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36be:	8b 89       	ldd	r24, Y+19	; 0x13
    36c0:	9c 89       	ldd	r25, Y+20	; 0x14
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	9c 8b       	std	Y+20, r25	; 0x14
    36c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ca:	9c 89       	ldd	r25, Y+20	; 0x14
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	69 f7       	brne	.-38     	; 0x36aa <CheckID+0x118>
    36d0:	14 c0       	rjmp	.+40     	; 0x36fa <CheckID+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d2:	6d 89       	ldd	r22, Y+21	; 0x15
    36d4:	7e 89       	ldd	r23, Y+22	; 0x16
    36d6:	8f 89       	ldd	r24, Y+23	; 0x17
    36d8:	98 8d       	ldd	r25, Y+24	; 0x18
    36da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	9c 8b       	std	Y+20, r25	; 0x14
    36e4:	8b 8b       	std	Y+19, r24	; 0x13
    36e6:	8b 89       	ldd	r24, Y+19	; 0x13
    36e8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ea:	98 8b       	std	Y+16, r25	; 0x10
    36ec:	8f 87       	std	Y+15, r24	; 0x0f
    36ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    36f0:	98 89       	ldd	r25, Y+16	; 0x10
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	f1 f7       	brne	.-4      	; 0x36f2 <CheckID+0x160>
    36f6:	98 8b       	std	Y+16, r25	; 0x10
    36f8:	8f 87       	std	Y+15, r24	; 0x0f
	else
	{
		_delay_ms(500);
		HLCD_VoidClear();
    36fa:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
		HLCD_VoidSendString("Wrong ID");
    36fe:	87 e1       	ldi	r24, 0x17	; 23
    3700:	91 e0       	ldi	r25, 0x01	; 1
    3702:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	90 e8       	ldi	r25, 0x80	; 128
    370a:	ab eb       	ldi	r26, 0xBB	; 187
    370c:	b4 e4       	ldi	r27, 0x44	; 68
    370e:	8b 87       	std	Y+11, r24	; 0x0b
    3710:	9c 87       	std	Y+12, r25	; 0x0c
    3712:	ad 87       	std	Y+13, r26	; 0x0d
    3714:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3716:	6b 85       	ldd	r22, Y+11	; 0x0b
    3718:	7c 85       	ldd	r23, Y+12	; 0x0c
    371a:	8d 85       	ldd	r24, Y+13	; 0x0d
    371c:	9e 85       	ldd	r25, Y+14	; 0x0e
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	4a ef       	ldi	r20, 0xFA	; 250
    3724:	54 e4       	ldi	r21, 0x44	; 68
    3726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	8f 83       	std	Y+7, r24	; 0x07
    3730:	98 87       	std	Y+8, r25	; 0x08
    3732:	a9 87       	std	Y+9, r26	; 0x09
    3734:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3736:	6f 81       	ldd	r22, Y+7	; 0x07
    3738:	78 85       	ldd	r23, Y+8	; 0x08
    373a:	89 85       	ldd	r24, Y+9	; 0x09
    373c:	9a 85       	ldd	r25, Y+10	; 0x0a
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e8       	ldi	r20, 0x80	; 128
    3744:	5f e3       	ldi	r21, 0x3F	; 63
    3746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    374a:	88 23       	and	r24, r24
    374c:	2c f4       	brge	.+10     	; 0x3758 <CheckID+0x1c6>
		__ticks = 1;
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	9e 83       	std	Y+6, r25	; 0x06
    3754:	8d 83       	std	Y+5, r24	; 0x05
    3756:	3f c0       	rjmp	.+126    	; 0x37d6 <CheckID+0x244>
	else if (__tmp > 65535)
    3758:	6f 81       	ldd	r22, Y+7	; 0x07
    375a:	78 85       	ldd	r23, Y+8	; 0x08
    375c:	89 85       	ldd	r24, Y+9	; 0x09
    375e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	3f ef       	ldi	r19, 0xFF	; 255
    3764:	4f e7       	ldi	r20, 0x7F	; 127
    3766:	57 e4       	ldi	r21, 0x47	; 71
    3768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    376c:	18 16       	cp	r1, r24
    376e:	4c f5       	brge	.+82     	; 0x37c2 <CheckID+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3770:	6b 85       	ldd	r22, Y+11	; 0x0b
    3772:	7c 85       	ldd	r23, Y+12	; 0x0c
    3774:	8d 85       	ldd	r24, Y+13	; 0x0d
    3776:	9e 85       	ldd	r25, Y+14	; 0x0e
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	40 e2       	ldi	r20, 0x20	; 32
    377e:	51 e4       	ldi	r21, 0x41	; 65
    3780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9e 83       	std	Y+6, r25	; 0x06
    3796:	8d 83       	std	Y+5, r24	; 0x05
    3798:	0f c0       	rjmp	.+30     	; 0x37b8 <CheckID+0x226>
    379a:	88 ec       	ldi	r24, 0xC8	; 200
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	9c 83       	std	Y+4, r25	; 0x04
    37a0:	8b 83       	std	Y+3, r24	; 0x03
    37a2:	8b 81       	ldd	r24, Y+3	; 0x03
    37a4:	9c 81       	ldd	r25, Y+4	; 0x04
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <CheckID+0x214>
    37aa:	9c 83       	std	Y+4, r25	; 0x04
    37ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ae:	8d 81       	ldd	r24, Y+5	; 0x05
    37b0:	9e 81       	ldd	r25, Y+6	; 0x06
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	9e 83       	std	Y+6, r25	; 0x06
    37b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ba:	9e 81       	ldd	r25, Y+6	; 0x06
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	69 f7       	brne	.-38     	; 0x379a <CheckID+0x208>
    37c0:	14 c0       	rjmp	.+40     	; 0x37ea <CheckID+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c2:	6f 81       	ldd	r22, Y+7	; 0x07
    37c4:	78 85       	ldd	r23, Y+8	; 0x08
    37c6:	89 85       	ldd	r24, Y+9	; 0x09
    37c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	9e 83       	std	Y+6, r25	; 0x06
    37d4:	8d 83       	std	Y+5, r24	; 0x05
    37d6:	8d 81       	ldd	r24, Y+5	; 0x05
    37d8:	9e 81       	ldd	r25, Y+6	; 0x06
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	89 83       	std	Y+1, r24	; 0x01
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	9a 81       	ldd	r25, Y+2	; 0x02
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <CheckID+0x250>
    37e6:	9a 83       	std	Y+2, r25	; 0x02
    37e8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);

		return 11;
    37ea:	8b e0       	ldi	r24, 0x0B	; 11
    37ec:	8d a3       	std	Y+37, r24	; 0x25
    37ee:	8d a1       	ldd	r24, Y+37	; 0x25
	}

}
    37f0:	a5 96       	adiw	r28, 0x25	; 37
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	08 95       	ret

00003802 <CheckPassword>:
u8 CheckPassword( u8 A_Bool )
{
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	68 97       	sbiw	r28, 0x18	; 24
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	8f 8b       	std	Y+23, r24	; 0x17
	u16 pass1=4321 /* Ahmed  */	,
    3818:	81 ee       	ldi	r24, 0xE1	; 225
    381a:	90 e1       	ldi	r25, 0x10	; 16
    381c:	9e 8b       	std	Y+22, r25	; 0x16
    381e:	8d 8b       	std	Y+21, r24	; 0x15
		pass2=8765 /*  Nour  */	,
    3820:	8d e3       	ldi	r24, 0x3D	; 61
    3822:	92 e2       	ldi	r25, 0x22	; 34
    3824:	9c 8b       	std	Y+20, r25	; 0x14
    3826:	8b 8b       	std	Y+19, r24	; 0x13
		pass3=1987 /* Khaled */ ;
    3828:	83 ec       	ldi	r24, 0xC3	; 195
    382a:	97 e0       	ldi	r25, 0x07	; 7
    382c:	9a 8b       	std	Y+18, r25	; 0x12
    382e:	89 8b       	std	Y+17, r24	; 0x11

	u16 L_Pass;

	HLCD_VoidClear();
    3830:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
	HLCD_VoidSendString("Enter Password:");
    3834:	80 e2       	ldi	r24, 0x20	; 32
    3836:	91 e0       	ldi	r25, 0x01	; 1
    3838:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
	HLCD_VoidCursor(0,LINE1);
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	61 e0       	ldi	r22, 0x01	; 1
    3840:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidCursor>
	L_Pass=GetNumber();
    3844:	0e 94 b7 19 	call	0x336e	; 0x336e <GetNumber>
    3848:	98 8b       	std	Y+16, r25	; 0x10
    384a:	8f 87       	std	Y+15, r24	; 0x0f

	if		(A_Bool == 1 && L_Pass==pass1 )	{	return 1;	}
    384c:	8f 89       	ldd	r24, Y+23	; 0x17
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	51 f4       	brne	.+20     	; 0x3866 <CheckPassword+0x64>
    3852:	2f 85       	ldd	r18, Y+15	; 0x0f
    3854:	38 89       	ldd	r19, Y+16	; 0x10
    3856:	8d 89       	ldd	r24, Y+21	; 0x15
    3858:	9e 89       	ldd	r25, Y+22	; 0x16
    385a:	28 17       	cp	r18, r24
    385c:	39 07       	cpc	r19, r25
    385e:	19 f4       	brne	.+6      	; 0x3866 <CheckPassword+0x64>
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	88 8f       	std	Y+24, r24	; 0x18
    3864:	94 c0       	rjmp	.+296    	; 0x398e <CheckPassword+0x18c>
	else if	(A_Bool == 2 && L_Pass==pass2 )	{	return 2;	}
    3866:	8f 89       	ldd	r24, Y+23	; 0x17
    3868:	82 30       	cpi	r24, 0x02	; 2
    386a:	51 f4       	brne	.+20     	; 0x3880 <CheckPassword+0x7e>
    386c:	2f 85       	ldd	r18, Y+15	; 0x0f
    386e:	38 89       	ldd	r19, Y+16	; 0x10
    3870:	8b 89       	ldd	r24, Y+19	; 0x13
    3872:	9c 89       	ldd	r25, Y+20	; 0x14
    3874:	28 17       	cp	r18, r24
    3876:	39 07       	cpc	r19, r25
    3878:	19 f4       	brne	.+6      	; 0x3880 <CheckPassword+0x7e>
    387a:	82 e0       	ldi	r24, 0x02	; 2
    387c:	88 8f       	std	Y+24, r24	; 0x18
    387e:	87 c0       	rjmp	.+270    	; 0x398e <CheckPassword+0x18c>
	else if (A_Bool == 3 && L_Pass==pass3 )	{	return 3;	}
    3880:	8f 89       	ldd	r24, Y+23	; 0x17
    3882:	83 30       	cpi	r24, 0x03	; 3
    3884:	51 f4       	brne	.+20     	; 0x389a <CheckPassword+0x98>
    3886:	2f 85       	ldd	r18, Y+15	; 0x0f
    3888:	38 89       	ldd	r19, Y+16	; 0x10
    388a:	89 89       	ldd	r24, Y+17	; 0x11
    388c:	9a 89       	ldd	r25, Y+18	; 0x12
    388e:	28 17       	cp	r18, r24
    3890:	39 07       	cpc	r19, r25
    3892:	19 f4       	brne	.+6      	; 0x389a <CheckPassword+0x98>
    3894:	83 e0       	ldi	r24, 0x03	; 3
    3896:	88 8f       	std	Y+24, r24	; 0x18
    3898:	7a c0       	rjmp	.+244    	; 0x398e <CheckPassword+0x18c>
	else
	{
		HLCD_VoidClear();
    389a:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <HLCD_VoidClear>
		HLCD_VoidSendString("Wrong password");
    389e:	80 e3       	ldi	r24, 0x30	; 48
    38a0:	91 e0       	ldi	r25, 0x01	; 1
    38a2:	0e 94 0e 10 	call	0x201c	; 0x201c <HLCD_VoidSendString>
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	aa e7       	ldi	r26, 0x7A	; 122
    38ac:	b4 e4       	ldi	r27, 0x44	; 68
    38ae:	8b 87       	std	Y+11, r24	; 0x0b
    38b0:	9c 87       	std	Y+12, r25	; 0x0c
    38b2:	ad 87       	std	Y+13, r26	; 0x0d
    38b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    38bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	4a ef       	ldi	r20, 0xFA	; 250
    38c4:	54 e4       	ldi	r21, 0x44	; 68
    38c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	8f 83       	std	Y+7, r24	; 0x07
    38d0:	98 87       	std	Y+8, r25	; 0x08
    38d2:	a9 87       	std	Y+9, r26	; 0x09
    38d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38d6:	6f 81       	ldd	r22, Y+7	; 0x07
    38d8:	78 85       	ldd	r23, Y+8	; 0x08
    38da:	89 85       	ldd	r24, Y+9	; 0x09
    38dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	40 e8       	ldi	r20, 0x80	; 128
    38e4:	5f e3       	ldi	r21, 0x3F	; 63
    38e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ea:	88 23       	and	r24, r24
    38ec:	2c f4       	brge	.+10     	; 0x38f8 <CheckPassword+0xf6>
		__ticks = 1;
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	8d 83       	std	Y+5, r24	; 0x05
    38f6:	3f c0       	rjmp	.+126    	; 0x3976 <CheckPassword+0x174>
	else if (__tmp > 65535)
    38f8:	6f 81       	ldd	r22, Y+7	; 0x07
    38fa:	78 85       	ldd	r23, Y+8	; 0x08
    38fc:	89 85       	ldd	r24, Y+9	; 0x09
    38fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	3f ef       	ldi	r19, 0xFF	; 255
    3904:	4f e7       	ldi	r20, 0x7F	; 127
    3906:	57 e4       	ldi	r21, 0x47	; 71
    3908:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    390c:	18 16       	cp	r1, r24
    390e:	4c f5       	brge	.+82     	; 0x3962 <CheckPassword+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3910:	6b 85       	ldd	r22, Y+11	; 0x0b
    3912:	7c 85       	ldd	r23, Y+12	; 0x0c
    3914:	8d 85       	ldd	r24, Y+13	; 0x0d
    3916:	9e 85       	ldd	r25, Y+14	; 0x0e
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	40 e2       	ldi	r20, 0x20	; 32
    391e:	51 e4       	ldi	r21, 0x41	; 65
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	bc 01       	movw	r22, r24
    392a:	cd 01       	movw	r24, r26
    392c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	9e 83       	std	Y+6, r25	; 0x06
    3936:	8d 83       	std	Y+5, r24	; 0x05
    3938:	0f c0       	rjmp	.+30     	; 0x3958 <CheckPassword+0x156>
    393a:	88 ec       	ldi	r24, 0xC8	; 200
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	9c 83       	std	Y+4, r25	; 0x04
    3940:	8b 83       	std	Y+3, r24	; 0x03
    3942:	8b 81       	ldd	r24, Y+3	; 0x03
    3944:	9c 81       	ldd	r25, Y+4	; 0x04
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	f1 f7       	brne	.-4      	; 0x3946 <CheckPassword+0x144>
    394a:	9c 83       	std	Y+4, r25	; 0x04
    394c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394e:	8d 81       	ldd	r24, Y+5	; 0x05
    3950:	9e 81       	ldd	r25, Y+6	; 0x06
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3958:	8d 81       	ldd	r24, Y+5	; 0x05
    395a:	9e 81       	ldd	r25, Y+6	; 0x06
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	69 f7       	brne	.-38     	; 0x393a <CheckPassword+0x138>
    3960:	14 c0       	rjmp	.+40     	; 0x398a <CheckPassword+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3962:	6f 81       	ldd	r22, Y+7	; 0x07
    3964:	78 85       	ldd	r23, Y+8	; 0x08
    3966:	89 85       	ldd	r24, Y+9	; 0x09
    3968:	9a 85       	ldd	r25, Y+10	; 0x0a
    396a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	9e 83       	std	Y+6, r25	; 0x06
    3974:	8d 83       	std	Y+5, r24	; 0x05
    3976:	8d 81       	ldd	r24, Y+5	; 0x05
    3978:	9e 81       	ldd	r25, Y+6	; 0x06
    397a:	9a 83       	std	Y+2, r25	; 0x02
    397c:	89 83       	std	Y+1, r24	; 0x01
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	9a 81       	ldd	r25, Y+2	; 0x02
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <CheckPassword+0x180>
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1000);

		return 11;
    398a:	8b e0       	ldi	r24, 0x0B	; 11
    398c:	88 8f       	std	Y+24, r24	; 0x18
    398e:	88 8d       	ldd	r24, Y+24	; 0x18
	}


}
    3990:	68 96       	adiw	r28, 0x18	; 24
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	08 95       	ret

000039a2 <__mulsi3>:
    39a2:	62 9f       	mul	r22, r18
    39a4:	d0 01       	movw	r26, r0
    39a6:	73 9f       	mul	r23, r19
    39a8:	f0 01       	movw	r30, r0
    39aa:	82 9f       	mul	r24, r18
    39ac:	e0 0d       	add	r30, r0
    39ae:	f1 1d       	adc	r31, r1
    39b0:	64 9f       	mul	r22, r20
    39b2:	e0 0d       	add	r30, r0
    39b4:	f1 1d       	adc	r31, r1
    39b6:	92 9f       	mul	r25, r18
    39b8:	f0 0d       	add	r31, r0
    39ba:	83 9f       	mul	r24, r19
    39bc:	f0 0d       	add	r31, r0
    39be:	74 9f       	mul	r23, r20
    39c0:	f0 0d       	add	r31, r0
    39c2:	65 9f       	mul	r22, r21
    39c4:	f0 0d       	add	r31, r0
    39c6:	99 27       	eor	r25, r25
    39c8:	72 9f       	mul	r23, r18
    39ca:	b0 0d       	add	r27, r0
    39cc:	e1 1d       	adc	r30, r1
    39ce:	f9 1f       	adc	r31, r25
    39d0:	63 9f       	mul	r22, r19
    39d2:	b0 0d       	add	r27, r0
    39d4:	e1 1d       	adc	r30, r1
    39d6:	f9 1f       	adc	r31, r25
    39d8:	bd 01       	movw	r22, r26
    39da:	cf 01       	movw	r24, r30
    39dc:	11 24       	eor	r1, r1
    39de:	08 95       	ret

000039e0 <__udivmodsi4>:
    39e0:	a1 e2       	ldi	r26, 0x21	; 33
    39e2:	1a 2e       	mov	r1, r26
    39e4:	aa 1b       	sub	r26, r26
    39e6:	bb 1b       	sub	r27, r27
    39e8:	fd 01       	movw	r30, r26
    39ea:	0d c0       	rjmp	.+26     	; 0x3a06 <__udivmodsi4_ep>

000039ec <__udivmodsi4_loop>:
    39ec:	aa 1f       	adc	r26, r26
    39ee:	bb 1f       	adc	r27, r27
    39f0:	ee 1f       	adc	r30, r30
    39f2:	ff 1f       	adc	r31, r31
    39f4:	a2 17       	cp	r26, r18
    39f6:	b3 07       	cpc	r27, r19
    39f8:	e4 07       	cpc	r30, r20
    39fa:	f5 07       	cpc	r31, r21
    39fc:	20 f0       	brcs	.+8      	; 0x3a06 <__udivmodsi4_ep>
    39fe:	a2 1b       	sub	r26, r18
    3a00:	b3 0b       	sbc	r27, r19
    3a02:	e4 0b       	sbc	r30, r20
    3a04:	f5 0b       	sbc	r31, r21

00003a06 <__udivmodsi4_ep>:
    3a06:	66 1f       	adc	r22, r22
    3a08:	77 1f       	adc	r23, r23
    3a0a:	88 1f       	adc	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	1a 94       	dec	r1
    3a10:	69 f7       	brne	.-38     	; 0x39ec <__udivmodsi4_loop>
    3a12:	60 95       	com	r22
    3a14:	70 95       	com	r23
    3a16:	80 95       	com	r24
    3a18:	90 95       	com	r25
    3a1a:	9b 01       	movw	r18, r22
    3a1c:	ac 01       	movw	r20, r24
    3a1e:	bd 01       	movw	r22, r26
    3a20:	cf 01       	movw	r24, r30
    3a22:	08 95       	ret

00003a24 <__divmodsi4>:
    3a24:	97 fb       	bst	r25, 7
    3a26:	09 2e       	mov	r0, r25
    3a28:	05 26       	eor	r0, r21
    3a2a:	0e d0       	rcall	.+28     	; 0x3a48 <__divmodsi4_neg1>
    3a2c:	57 fd       	sbrc	r21, 7
    3a2e:	04 d0       	rcall	.+8      	; 0x3a38 <__divmodsi4_neg2>
    3a30:	d7 df       	rcall	.-82     	; 0x39e0 <__udivmodsi4>
    3a32:	0a d0       	rcall	.+20     	; 0x3a48 <__divmodsi4_neg1>
    3a34:	00 1c       	adc	r0, r0
    3a36:	38 f4       	brcc	.+14     	; 0x3a46 <__divmodsi4_exit>

00003a38 <__divmodsi4_neg2>:
    3a38:	50 95       	com	r21
    3a3a:	40 95       	com	r20
    3a3c:	30 95       	com	r19
    3a3e:	21 95       	neg	r18
    3a40:	3f 4f       	sbci	r19, 0xFF	; 255
    3a42:	4f 4f       	sbci	r20, 0xFF	; 255
    3a44:	5f 4f       	sbci	r21, 0xFF	; 255

00003a46 <__divmodsi4_exit>:
    3a46:	08 95       	ret

00003a48 <__divmodsi4_neg1>:
    3a48:	f6 f7       	brtc	.-4      	; 0x3a46 <__divmodsi4_exit>
    3a4a:	90 95       	com	r25
    3a4c:	80 95       	com	r24
    3a4e:	70 95       	com	r23
    3a50:	61 95       	neg	r22
    3a52:	7f 4f       	sbci	r23, 0xFF	; 255
    3a54:	8f 4f       	sbci	r24, 0xFF	; 255
    3a56:	9f 4f       	sbci	r25, 0xFF	; 255
    3a58:	08 95       	ret

00003a5a <__prologue_saves__>:
    3a5a:	2f 92       	push	r2
    3a5c:	3f 92       	push	r3
    3a5e:	4f 92       	push	r4
    3a60:	5f 92       	push	r5
    3a62:	6f 92       	push	r6
    3a64:	7f 92       	push	r7
    3a66:	8f 92       	push	r8
    3a68:	9f 92       	push	r9
    3a6a:	af 92       	push	r10
    3a6c:	bf 92       	push	r11
    3a6e:	cf 92       	push	r12
    3a70:	df 92       	push	r13
    3a72:	ef 92       	push	r14
    3a74:	ff 92       	push	r15
    3a76:	0f 93       	push	r16
    3a78:	1f 93       	push	r17
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	cd b7       	in	r28, 0x3d	; 61
    3a80:	de b7       	in	r29, 0x3e	; 62
    3a82:	ca 1b       	sub	r28, r26
    3a84:	db 0b       	sbc	r29, r27
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	de bf       	out	0x3e, r29	; 62
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	cd bf       	out	0x3d, r28	; 61
    3a90:	09 94       	ijmp

00003a92 <__epilogue_restores__>:
    3a92:	2a 88       	ldd	r2, Y+18	; 0x12
    3a94:	39 88       	ldd	r3, Y+17	; 0x11
    3a96:	48 88       	ldd	r4, Y+16	; 0x10
    3a98:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3aa0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3aa2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3aa4:	b9 84       	ldd	r11, Y+9	; 0x09
    3aa6:	c8 84       	ldd	r12, Y+8	; 0x08
    3aa8:	df 80       	ldd	r13, Y+7	; 0x07
    3aaa:	ee 80       	ldd	r14, Y+6	; 0x06
    3aac:	fd 80       	ldd	r15, Y+5	; 0x05
    3aae:	0c 81       	ldd	r16, Y+4	; 0x04
    3ab0:	1b 81       	ldd	r17, Y+3	; 0x03
    3ab2:	aa 81       	ldd	r26, Y+2	; 0x02
    3ab4:	b9 81       	ldd	r27, Y+1	; 0x01
    3ab6:	ce 0f       	add	r28, r30
    3ab8:	d1 1d       	adc	r29, r1
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	ed 01       	movw	r28, r26
    3ac6:	08 95       	ret

00003ac8 <_exit>:
    3ac8:	f8 94       	cli

00003aca <__stop_program>:
    3aca:	ff cf       	rjmp	.-2      	; 0x3aca <__stop_program>
